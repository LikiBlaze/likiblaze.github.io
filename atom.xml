<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>LikiBlaze</title>
  
  <subtitle>Welcome!!!</subtitle>
  <link href="https://blog.foxex.cn/atom.xml" rel="self"/>
  
  <link href="https://blog.foxex.cn/"/>
  <updated>2020-12-31T13:23:56.242Z</updated>
  <id>https://blog.foxex.cn/</id>
  
  <author>
    <name>LikiBlaze</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UOJ T1~T15 题解</title>
    <link href="https://blog.foxex.cn/2020/11/26/UOJ-T1-T15-%E9%A2%98%E8%A7%A3/"/>
    <id>https://blog.foxex.cn/2020/11/26/UOJ-T1-T15-%E9%A2%98%E8%A7%A3/</id>
    <published>2020-11-26T08:33:08.000Z</published>
    <updated>2020-12-31T13:23:56.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">b=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">print(a+b)</span><br></pre></td></tr></table></figure><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">&#x27;Hello,World!&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">b=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">c=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">print(<span class="built_in">max</span>(a,b,c))</span><br></pre></td></tr></table></figure><h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">b=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">c=<span class="built_in">int</span>(a/b)</span><br><span class="line">print(<span class="built_in">int</span>(a/b))</span><br><span class="line">print(a-b*c)</span><br></pre></td></tr></table></figure><h2 id="T5"><a href="#T5" class="headerlink" title="T5"></a>T5</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fahrenheit = <span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">celsius = (fahrenheit - <span class="number">32</span>) / <span class="number">1.8</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">&#x27;%0.5f &#x27;</span> %(celsius))</span><br></pre></td></tr></table></figure><h2 id="T6"><a href="#T6" class="headerlink" title="T6"></a>T6</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PI=<span class="number">3.14</span></span><br><span class="line">R=<span class="built_in">float</span>(<span class="built_in">input</span>())</span><br><span class="line">print(<span class="string">&#x27;%.2f&#x27;</span>,%(R*R*R*PI*<span class="number">4</span>/<span class="number">3</span>))</span><br></pre></td></tr></table></figure><h2 id="T7"><a href="#T7" class="headerlink" title="T7"></a>T7</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a1=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">a2=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">d=a2-a1;</span><br><span class="line">an=a1+(n-<span class="number">1</span>)*d</span><br><span class="line">print(an)</span><br></pre></td></tr></table></figure><h2 id="T8"><a href="#T8" class="headerlink" title="T8"></a>T8</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> a&gt;<span class="number">0</span>:</span><br><span class="line">print(<span class="string">&#x27;positive&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> a=<span class="number">0</span>:</span><br><span class="line">print(<span class="string">&#x27;zero&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">&#x27;negative&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="T9"><a href="#T9" class="headerlink" title="T9"></a>T9</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> a&amp;<span class="number">1</span>:</span><br><span class="line">print(<span class="string">&#x27;odd&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">&#x27;even&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="T10"><a href="#T10" class="headerlink" title="T10"></a>T10</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> (a%<span class="number">3</span>==<span class="number">0</span>)&amp;&amp;(a%<span class="number">5</span>==<span class="number">0</span>):</span><br><span class="line">print(<span class="string">&#x27;YES&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">&#x27;NO&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="T11"><a href="#T11" class="headerlink" title="T11"></a>T11</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">b=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">c=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">print(<span class="built_in">max</span>(a,b,c))</span><br></pre></td></tr></table></figure><h2 id="T12"><a href="#T12" class="headerlink" title="T12"></a>T12</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">tot=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">tot=tot+<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">print(<span class="string">&#x27;%.2f&#x27;</span>,%(<span class="built_in">float</span>(tot)/n))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;T1&quot;&gt;&lt;a href=&quot;#T1&quot; class=&quot;headerlink&quot; title=&quot;T1&quot;&gt;&lt;/a&gt;T1&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    
    <category term="字符串" scheme="https://blog.foxex.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="排序" scheme="https://blog.foxex.cn/tags/%E6%8E%92%E5%BA%8F/"/>
    
    <category term="校内事务" scheme="https://blog.foxex.cn/tags/%E6%A0%A1%E5%86%85%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>CSP2020游记</title>
    <link href="https://blog.foxex.cn/2020/11/08/CSP2020%E6%B8%B8%E8%AE%B0/"/>
    <id>https://blog.foxex.cn/2020/11/08/CSP2020%E6%B8%B8%E8%AE%B0/</id>
    <published>2020-11-08T08:29:00.000Z</published>
    <updated>2020-11-08T09:02:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前夜"><a href="#前夜" class="headerlink" title="前夜"></a>前夜</h2><p>前一天晚上到的日照……到的时候大概三四点钟吧。到了之后先去山外看了看我的考场D303.考场真的牛逼，全部Win10，16G RAM，U是AMD的3400x。当时是真的激动，感觉明天打表木的问题了。</p><p>晚上住的旅馆很不满意，进去一会就退房了。退房倒还顺利，马上给退了。又找了一家，价钱比刚才的便宜一半，但是条件不知道比刚才的好了多少。虽然又跑了5KM，但是感觉还是值了。大概住下的时候7：30了已经。颓了一阵子，打了个Dij板子一个多小时愣是没调出来，真的自闭了，感觉明天要凉凉。</p><p>大概10:30就睡了。</p><h2 id="早"><a href="#早" class="headerlink" title="早"></a>早</h2><p>几点起的记不清了。起来之后看一眼发现昨天的Dij数组开小了，改上数组接着就过了。发现其实第一次编译的时候就写的是对的……</p><p>然后一上午都在看人家的经验总结，打了写快读，对拍之类的，顺便搞了个天秀对拍，（这里不能放视频，我就不放了）</p><h2 id="入场"><a href="#入场" class="headerlink" title="入场"></a>入场</h2><p>恩……终于该入场了。</p><p>进昨天那个让我激动不已的考场，结果监考员说考场机器全都打不开了……就到了A501……</p><p>备用考场，条件可想而知。4代i3,4G RAM……</p><p>算了，也就这样吧。</p><h2 id="T1"><a href="#T1" class="headerlink" title="T1"></a>T1</h2><p>这个题是真的阴间……一开始读了一会题，决定放弃了。先去打T2.</p><p>T2打完之后回来，剩下的3个小时都在打这个了……</p><p>打到最后，小样例都有没过的，更别说大洋例了，估计是零分。</p><p>代码倒是有了近400行，if套了10多层</p><p>不应该用那么多时间打大模拟的</p><p>可是已经无法挽回了</p><h2 id="T2"><a href="#T2" class="headerlink" title="T2"></a>T2</h2><p>这个题倒还算阳间，大概花了40分钟。</p><p>考试完发现忘记开ull，不过可能也丢不了几分（希望如此）</p><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><p>看起来暴力挺好打，有30分可以拿。</p><p>但是打了一些发现这30分代码量也比较大，也放弃了。</p><h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><p>读了一遍题，果断放弃了。</p><p>静候成绩吧……（这几天是真**的非）</p>]]></content>
    
    
    <summary type="html">CSP2020爆零全过程超详细全解！</summary>
    
    
    
    <category term="游记" scheme="https://blog.foxex.cn/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
    <category term="CSP" scheme="https://blog.foxex.cn/tags/CSP/"/>
    
    <category term="游记" scheme="https://blog.foxex.cn/tags/%E6%B8%B8%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>关于class</title>
    <link href="https://blog.foxex.cn/2020/07/29/%E5%85%B3%E4%BA%8Eclass/"/>
    <id>https://blog.foxex.cn/2020/07/29/%E5%85%B3%E4%BA%8Eclass/</id>
    <published>2020-07-29T14:39:22.000Z</published>
    <updated>2020-12-31T13:19:10.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="首先"><a href="#首先" class="headerlink" title="首先"></a>首先</h1><p>关于<code>class</code>，许多<code>OIer</code>便会认为这是一种非常高深的语法，我们无论是现在还是以后的<code>OI</code>学习中都用不到。</p><p>确实，<code>class</code>在<code>OI</code>比赛中可以永远不用。</p><p>可是，如果这么说的话，除了递归之外，其他函数也可以在<code>OI</code>比赛中永远不使用。可是，那我们使用它的原因是什么呢？</p><p>对，是因为它可以使程序编写更加容易。</p><p>众所周知，<code>C++</code>相较于<code>C</code>，主要的区别就是在于<code>C++</code>增加了关于面向对象的支持，和<code>STL</code>。由于我们一般并不去使用面向对象，所以我们学习的语言被戏称为<code>&quot;C with STL&quot;</code>。</p><p>但是，学习面向对象的基本思想，和有关面向对象的基本语法，真的可以让我们对<code>C++</code>语言的认识提升一个档次。</p><h1 id="class是什么？"><a href="#class是什么？" class="headerlink" title="class是什么？"></a>class是什么？</h1><p>其实，我们在使用<code>struct</code>的时候，就已经对面向对象有了初步的认识。</p><p><code>struct</code>其实就相当于是这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没错，也就是说，<code>struct</code>就相当于是一个全部都是<code>public</code>的<code>class</code>。</p><p>说到这里，读者对<code>class</code>的望而生畏的感觉应当减少了一些。</p><p>但是很显然，<code>class</code>远远不只有这一点点用处。</p><h1 id="class"><a href="#class" class="headerlink" title="class"></a>class</h1><p><code>class</code>的基本用法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a_class</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出，这个<code>class</code>比刚才的那一个多出了一个<code>private:</code>。</p><p>那这个<code>private</code>有什么用处呢？</p><p>在<code>private</code>内部的函数，只能在类的内部访问，在外部无论通过什么方法也是无法直接访问的。</p><p>在调用类的时候，只能使用<code>public</code>内部的函数。</p><p>这样就有了一个好处：</p><p>我们在使用一个类的时候，不需要管它内部是怎样实现的，只需要调用在<code>public</code>中的函数接口即可。</p><p>这样，虽然我们再写类的时候要仔细思考接口怎样编写比较方便，但是大大减少了我们在写类外部代码时的思维量。</p><p>而毕竟写类只需要写一次，调用可能需奥很多很多次，所以我们总体的思维量还是会有所下降。</p><h1 id="范例"><a href="#范例" class="headerlink" title="范例"></a>范例</h1><p>（下面是我自己在考试的时候写的矩阵快速幂代码：<del>其实本来只是想秀给CYC看的</del>）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">martix</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> nums[<span class="number">6</span>][<span class="number">6</span>];</span><br><span class="line">clear()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(nums,<span class="number">0</span>,<span class="keyword">sizeof</span>(nums));</span><br><span class="line">&#125;</span><br><span class="line">make_standard()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memset</span>(nums,<span class="number">0</span>,<span class="keyword">sizeof</span>(nums));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">nums[i][i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">martix()</span><br><span class="line">&#123;</span><br><span class="line">clear();</span><br><span class="line">&#125;</span><br><span class="line">martix <span class="keyword">operator</span>*(martix b)</span><br><span class="line">&#123;</span><br><span class="line">martix result;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">3</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">3</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">1</span>;k&lt;=<span class="number">3</span>;k++)</span><br><span class="line">&#123;</span><br><span class="line">result.nums[i][j]+=nums[i][k]*b.nums[k][j]%<span class="number">1000000007</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">martix <span class="title">quick_pow</span><span class="params">(<span class="keyword">long</span> <span class="keyword">long</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">martix result;</span><br><span class="line">result.make_standard();</span><br><span class="line">martix base;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">5</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">register</span> <span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">5</span>;j++)</span><br><span class="line">&#123;</span><br><span class="line">base.nums[i][j]=nums[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(k)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(k&amp;<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">result=result*base;</span><br><span class="line">&#125;</span><br><span class="line">k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">base=base*base;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_fib</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">nums[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">nums[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">nums[<span class="number">1</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">make_base</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">nums[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">nums[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">nums[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">nums[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">nums[<span class="number">3</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">nums[<span class="number">3</span>][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">nums[<span class="number">2</span>][<span class="number">3</span>]=<span class="number">1</span>;</span><br><span class="line">nums[<span class="number">1</span>][<span class="number">3</span>]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%I64d\n&quot;</span>,nums[<span class="number">1</span>][<span class="number">3</span>]%<span class="number">1000000007</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">2e7</span>+<span class="number">90</span>;</span><br><span class="line">martix fib;</span><br><span class="line">martix base;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">freopen(<span class="string">&quot;seq.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">freopen(<span class="string">&quot;seq.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=T;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;temp;</span><br><span class="line">fib.make_fib();</span><br><span class="line">base.make_base();</span><br><span class="line">fib=fib*base.quick_pow(temp<span class="number">-1</span>);</span><br><span class="line">fib.print();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>本文目前只是写了一丁点皮毛。以后应该会持续更新。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;首先&quot;&gt;&lt;a href=&quot;#首先&quot; class=&quot;headerlink&quot; title=&quot;首先&quot;&gt;&lt;/a&gt;首先&lt;/h1&gt;&lt;p&gt;关于&lt;code&gt;class&lt;/code&gt;，许多&lt;code&gt;OIer&lt;/code&gt;便会认为这是一种非常高深的语法，我们无论是现在还是以后的&lt;c</summary>
      
    
    
    
    
    <category term="C++基础" scheme="https://blog.foxex.cn/tags/C-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>很急的灾题解</title>
    <link href="https://blog.foxex.cn/2020/07/27/%E5%BE%88%E6%80%A5%E7%9A%84%E7%81%BE%E9%A2%98%E8%A7%A3/"/>
    <id>https://blog.foxex.cn/2020/07/27/%E5%BE%88%E6%80%A5%E7%9A%84%E7%81%BE%E9%A2%98%E8%A7%A3/</id>
    <published>2020-07-27T00:18:01.000Z</published>
    <updated>2020-12-31T13:15:20.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h4 id="很急的灾"><a href="#很急的灾" class="headerlink" title="很急的灾"></a><a href="https://likiblaze.gitee.io/%E5%BE%88%E6%80%A5%E7%9A%84%E7%81%BE/">很急的灾</a></h4><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>……这个题……</p><p>难道不是<b>很裸、很简单</b>吗？？？</p><p>首先，我们看到题目中的每个村庄内部，每家每户都可以互相到达，一个避难所内部也都可以互相到达，很容易想到它们都是强连通分量。我们只需要使用<code>Tarjian</code>进行缩点，这些村庄，避难所就都变成一个个的节点了。然后，根据题目中的村庄之间不能到达，避难所之间不能到达，那么很明显这就会组成一张二分图。然后只需要进行二分图最大匹配，不就行啦吗？？？</p><p>到底有什么难的呀？</p><h1>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>);</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> &amp;x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> f[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tmp = x;</span><br><span class="line">    <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = -tmp;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        f[s++] = tmp % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        tmp /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (s &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(f[--s]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">3500010</span>, M = <span class="number">3500010</span>;</span><br><span class="line"><span class="keyword">int</span> ver[M], Next[M], head[N], dfn[N], low[N];</span><br><span class="line"><span class="keyword">int</span> in_stack[N], in_DCC_num[N];</span><br><span class="line"><span class="keyword">int</span> ver_of_DCC[M], next_of_DCC[M], head_of_DCC[N], tot_DCC_Nodes;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; Nodes_of_DCCs;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; DCCs[N];</span><br><span class="line"><span class="keyword">int</span> tot, num, cnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ver[++tot] = y, Next[tot] = head[x], head[x] = tot;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_DCC_Node</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ver_of_DCC[++tot_DCC_Nodes] = y, next_of_DCC[tot_DCC_Nodes] = head_of_DCC[x], head_of_DCC[x] = tot_DCC_Nodes;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tarjan</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    dfn[x] = low[x] = ++num;</span><br><span class="line">    Nodes_of_DCCs.push(x);</span><br><span class="line">    in_stack[x] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head[x]; i; i = Next[i])</span><br><span class="line">        <span class="keyword">if</span> (!dfn[ver[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(ver[i]);</span><br><span class="line">            low[x] = min(low[x], low[ver[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (in_stack[ver[i]])</span><br><span class="line">            low[x] = min(low[x], dfn[ver[i]]);</span><br><span class="line">    <span class="keyword">if</span> (dfn[x] == low[x])</span><br><span class="line">    &#123;</span><br><span class="line">        cnt++;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            y = Nodes_of_DCCs.top();</span><br><span class="line">            Nodes_of_DCCs.pop();</span><br><span class="line">            in_stack[y] = <span class="number">0</span>;</span><br><span class="line">            in_DCC_num[y] = cnt, DCCs[cnt].push_back(y);</span><br><span class="line">        &#125; <span class="keyword">while</span> (x != y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> visit[<span class="number">3500090</span>];</span><br><span class="line"><span class="keyword">int</span> match[<span class="number">3500090</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = head_of_DCC[x]; i; i = next_of_DCC[i])</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y;</span><br><span class="line">        <span class="keyword">if</span> (!visit[y = ver_of_DCC[i]])</span><br><span class="line">        &#123;</span><br><span class="line">            visit[y] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (!match[y] || dfs(match[y]))</span><br><span class="line">            &#123;</span><br><span class="line">                match[y] = x;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> answer = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> totDOT;</span><br><span class="line"><span class="keyword">int</span> totROAD;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    totDOT = read();</span><br><span class="line">    totROAD = read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= totROAD; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        add(read(), read());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= totDOT; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!dfn[i])</span><br><span class="line">        &#123;</span><br><span class="line">            tarjan(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= totDOT; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = head[i]; j; j = Next[j])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> y = ver[j];</span><br><span class="line">            <span class="keyword">if</span> (in_DCC_num[i] == in_DCC_num[y])</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            add_DCC_Node(in_DCC_num[i], in_DCC_num[y]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= cnt; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memset</span>(visit, <span class="number">0</span>, <span class="keyword">sizeof</span>(visit));</span><br><span class="line">        <span class="keyword">if</span> (dfs(i))</span><br><span class="line">        &#123;</span><br><span class="line">            answer++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    write(answer);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="comment">//LikiBlaze Code</span></span><br></pre></td></tr></table></figure><p>emm……不就是这些？？？</p>]]></content>
    
    
    <summary type="html">2020-07-27图论测试 T3 很急的灾 题解。</summary>
    
    
    
    <category term="校内测试" scheme="https://blog.foxex.cn/categories/%E6%A0%A1%E5%86%85%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="校内测试" scheme="https://blog.foxex.cn/tags/%E6%A0%A1%E5%86%85%E6%B5%8B%E8%AF%95/"/>
    
    <category term="Tarjian" scheme="https://blog.foxex.cn/tags/Tarjian/"/>
    
    <category term="二分图最大匹配" scheme="https://blog.foxex.cn/tags/%E4%BA%8C%E5%88%86%E5%9B%BE%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>2020-07-20测试</title>
    <link href="https://blog.foxex.cn/2020/07/20/2020-07-20%E6%B5%8B%E8%AF%95/"/>
    <id>https://blog.foxex.cn/2020/07/20/2020-07-20%E6%B5%8B%E8%AF%95/</id>
    <published>2020-07-20T08:32:18.000Z</published>
    <updated>2020-12-31T13:15:51.171Z</updated>
    
    <content type="html"><![CDATA[<h1 id="T1-懒羊羊找朋友"><a href="#T1-懒羊羊找朋友" class="headerlink" title="T1 懒羊羊找朋友"></a>T1 懒羊羊找朋友</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>最近电视上热播“喜羊羊与灰太狼”，大家都说“做人要做懒羊羊”，为什么呢？因为他 不愿意多做一个动作、不愿意多动一个脑筋，甚至懒得张嘴吃饭，简直是懒的无与伦比！ 话说羊村的羊还真多啊！每周一早晨，羊村老村长慢羊羊同志学着人类的学校，把所有 羊列队在广场上进行思想教育，主要是保持警惕防止狼类的攻击，当然也包括对懒羊羊之类 的“异类”进行批评教育。 羊群列队成一个 m*n 的方阵，每只羊站在一个格子里，而且是长期固定的，便于点名啊：） 晕倒！当然，这样一来的好处是，大家都知道自己的朋友站在哪个位置，虽然它们可能互相 看不见，但心里都知道，并且在老村长进行无聊的训教时，大家都还想赶快结束赶快找离自 己最近的朋友交流周末的开心事呢？ 懒羊羊也想尽快找到自己的好朋友聊天，但是他既不愿意多走路、又不愿意动脑筋去想 怎么走，所以就请智羊羊同学帮它编个程序，以便快速定位找到离它最近的一位好朋友。 如果你是智羊羊，你怎么完成这个任务呢？</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>问题输入： 第 1 行为两个整数 m 和 n， 2&lt;=m,n&lt;=100。 第 2 行为懒羊羊的位置 x,y，表示在第 x 行 y 列。 以下 m 行为一个 m*n 的数字方阵， 所有 a[i,j]的值相等的表示是好朋友， 1&lt;=a[i,j]&lt;=100。 每行的两个数之间都有一个空格分隔。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>问题输出： 输出一行两个数 x1,y1，表示懒羊羊最近的一个朋友的位置在第 x1 行 y1 列，之间用一 个空格隔开。 如果最近的的朋友不只一个，则输出 x1 最小的，如果还不唯一则输出 y1 最小的。 数据保证懒羊羊一定有朋友。</p><h4 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><p><strong>输入 #1</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>输出 #1</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>这道题很明显是一个极其裸的广搜题。</p><p>可是我竟然因为太长时间没做广搜的题导致忘记了广搜怎么写……</p><p>不过我还是根据自己对于广搜的理解写出了正确的广搜代码。</p><p>但是还是不对……对广搜的极度不自信导致我一直在检查我的广搜……</p><p>考试的时候调试了将近两个小时，后来又调试了很长时间也没有调试出来。</p><p>最后发现竟然是变量名称写错了……</p><p>应该是<code>temp1</code>结果写成<code>temp</code>了……</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>);</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> totN;</span><br><span class="line"><span class="keyword">int</span> totM;</span><br><span class="line"><span class="keyword">int</span> X,Y;</span><br><span class="line"><span class="keyword">int</span> mapp[<span class="number">109</span>][<span class="number">109</span>];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; Q;</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">4</span>][<span class="number">2</span>]=&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">int</span> step[<span class="number">109</span>][<span class="number">109</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x,y;</span><br><span class="line">&#125;friends[<span class="number">109</span>];</span><br><span class="line"><span class="keyword">int</span> fricnt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">109</span>][<span class="number">109</span>];</span><br><span class="line"><span class="keyword">int</span> mindis=<span class="number">99999999</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(student aa,student bb)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(aa.x&lt;bb.x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(aa.x&gt;bb.x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(aa.y&lt;bb.y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">BFS</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; temppair;</span><br><span class="line">    temppair.first=X;</span><br><span class="line">    temppair.second=Y;</span><br><span class="line">    Q.push(temppair);</span><br><span class="line">    vis[X][Y]=<span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(!Q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> nowx=Q.front().first;</span><br><span class="line">        <span class="keyword">int</span> nowy=Q.front().second;</span><br><span class="line">        <span class="keyword">int</span> nowstep=step[Q.front().first][Q.front().second];</span><br><span class="line">        <span class="keyword">if</span>(mapp[nowx][nowy]==mapp[X][Y]&amp;&amp;nowstep&lt;=mindis&amp;&amp;(nowx!=X||nowy!=Y))</span><br><span class="line">        &#123;</span><br><span class="line">            mindis=nowstep;</span><br><span class="line">            friends[fricnt].x=nowx;</span><br><span class="line">            friends[fricnt].y=nowy;</span><br><span class="line">            fricnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nowstep&gt;mindis+<span class="number">3</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp; i : dir)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> x=Q.front().first+i[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> y=Q.front().second+i[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> astep=step[Q.front().first][Q.front().second];</span><br><span class="line">            step[x][y]=astep+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(x&lt;=totM&amp;&amp;y&lt;=totN&amp;&amp;!vis[x][y]&amp;&amp;x&gt;<span class="number">0</span>&amp;&amp;y&gt;<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                vis[x][y]=<span class="literal">true</span>;</span><br><span class="line">                <span class="built_in">pair</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; temppair1;</span><br><span class="line">                temppair1.first=x;</span><br><span class="line">                temppair1.second=y;</span><br><span class="line">                Q.push(temppair1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Q.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;totM&gt;&gt;totN;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;X&gt;&gt;Y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=totM;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=totN;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            mapp[i][j]=read();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    BFS();</span><br><span class="line">    sort(friends+<span class="number">1</span>,friends+fricnt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d %d&quot;</span>,friends[<span class="number">1</span>].x,friends[<span class="number">1</span>].y);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>就是在第91行……应该push<code>temppair1</code>结果当时push成<code>temppair</code>了……</p><p>就导致我后面的题几乎没多少时间了……</p><h1 id="T2-圆的国度"><a href="#T2-圆的国度" class="headerlink" title="T2 圆的国度"></a>T2 圆的国度</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>平面上有 n 个没有公共点 ． ． ． ． ． 的圆。你要从点(x1,y1)走到(x2,y2)。问你最少要经过多少圆 的边界。保证这两个点都不在圆的边界上。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>问题输入： 第一行一个整数 n， 1&lt;=n&lt;=50。 接下来三行每行 n 个整数，分别表示 n 个圆的圆心和半径，格式如下： x1,x2,„,xi,„,xn y1,y2,„,yi,„,yn r1,r2,„,ri,„,rn -1000&lt;=xi,yi&lt;=1000,1&lt;=ri&lt;=1000 最后一行四个整数 X1,Y1,X2,Y2， -1000&lt;=x1,y1,x2,y2&lt;=1000。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>问题输出： 一个整数，意义如上。</p><h4 id="输入输出样例-1"><a href="#输入输出样例-1" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><p><strong>输入 #1</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">0</span> </span><br><span class="line"><span class="number">0</span> </span><br><span class="line"><span class="number">2</span> </span><br><span class="line"><span class="number">-5</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>输出 #1</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span></span><br></pre></td></tr></table></figure><p><strong>输入 #2</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">0</span> <span class="number">-6</span> <span class="number">6</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">6</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">-5</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>输出 #2</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h2><p>这道题其实是很简单的……</p><p>但是我当时把圆都当作了实心圆，“没有公共点”理解成了圆内部也不会有其他圆</p><p>就导致我认为这个题答案只会有<code>0,1,2</code>。</p><p>而样例恰恰没有违背我的理解，我的代码还过了样例……</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>);</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> f[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> tmp = x;</span><br><span class="line">    <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = -tmp;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        f[s++] = tmp % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        tmp /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (s &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(f[--s]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> totN;</span><br><span class="line"><span class="keyword">double</span> ax,ay,bx,by;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    <span class="keyword">double</span> r;</span><br><span class="line">    <span class="keyword">bool</span> in[<span class="number">3</span>];</span><br><span class="line">&#125;circles[<span class="number">1009</span>];</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    totN=read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= totN; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        circles[i].x=read();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= totN; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        circles[i].y=read();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= totN; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        circles[i].r=read();</span><br><span class="line">    &#125;</span><br><span class="line">    ax=read();</span><br><span class="line">    ay=read();</span><br><span class="line">    bx=read();</span><br><span class="line">    by=read();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= totN; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(circles[i].x-ax+<span class="number">0.0</span>)*<span class="built_in">fabs</span>(circles[i].x-ax+<span class="number">0.0</span>)+<span class="built_in">fabs</span>(circles[i].y-ay+<span class="number">0.0</span>)*<span class="built_in">fabs</span>(circles[i].y-ay+<span class="number">0.0</span>)&lt;=circles[i].r*circles[i].r+<span class="number">0.0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            circles[i].in[<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">fabs</span>(circles[i].x-bx+<span class="number">0.0</span>)*<span class="built_in">fabs</span>(circles[i].x-bx+<span class="number">0.0</span>)+<span class="built_in">fabs</span>(circles[i].y-by+<span class="number">0.0</span>)*<span class="built_in">fabs</span>(circles[i].y-by+<span class="number">0.0</span>)&lt;=circles[i].r*circles[i].r+<span class="number">0.0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            circles[i].in[<span class="number">2</span>]=<span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= totN; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        result+=circles[i].in[<span class="number">1</span>]^circles[i].in[<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    write(result);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//LikiBlaze Code</span></span><br></pre></td></tr></table></figure><p>如果圆之间可以包含的话，其实总体思路是一样的……只要有圆是一个点在但是另一个点不在，<code>result++</code>即可。</p><h1 id="T3-阶乘之和"><a href="#T3-阶乘之和" class="headerlink" title="T3 阶乘之和"></a>T3 阶乘之和</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>给定一个非负整数 n，请你判断 n 是否可以由一些非负整数的阶乘相加得到。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>有若干组数据。每行一个整数 n，保证 n&lt;1000000。 以负数结束输入。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>对于每组数据输出一行，若可以则输出‘YES’，否则输出‘NO’。</p><h4 id="输入输出样例-2"><a href="#输入输出样例-2" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><p><strong>输入 #1</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">9</span> </span><br><span class="line"><span class="number">-1</span></span><br></pre></td></tr></table></figure><p><strong>输出 #1</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure><h2 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h2><p>这道题可以选择深搜，也可以选择01背包预处理。</p><p>我考试的时候写的是深搜，然后后来写的是预处理。</p><p>主要的错误其实和别人也是一样的，以为<code>0!=1</code>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>);</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> f[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> tmp = x;</span><br><span class="line">    <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = -tmp;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        f[s++] = tmp % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        tmp /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (s &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(f[--s]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxc=<span class="number">10</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> jie[<span class="number">19</span>]=&#123;<span class="number">1</span>,<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">bool</span> used[<span class="number">19</span>];</span><br><span class="line"><span class="keyword">bool</span> able[<span class="number">1000090</span>]=&#123;<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">cheng</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= maxc; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        jie[i] = jie[i - <span class="number">1</span>] * i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">9</span>; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1000009</span>-jie[j]; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (able[i])</span><br><span class="line">            &#123;</span><br><span class="line">                able[i+jie[j]]=<span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cheng();</span><br><span class="line">    work();</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    temp=read();</span><br><span class="line">    <span class="keyword">while</span> (temp&gt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp==<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;N&#x27;</span>);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;O&#x27;</span>);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (able[temp])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;Y&#x27;</span>);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;E&#x27;</span>);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;S&#x27;</span>);</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">&#x27;N&#x27;</span>);</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">&#x27;O&#x27;</span>);</span><br><span class="line">                <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        temp=read();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//LikiBlaze Code</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">2020-07-20校内测试的反思与总结。</summary>
    
    
    
    <category term="校内测试" scheme="https://blog.foxex.cn/categories/%E6%A0%A1%E5%86%85%E6%B5%8B%E8%AF%95/"/>
    
    
    <category term="校内测试" scheme="https://blog.foxex.cn/tags/%E6%A0%A1%E5%86%85%E6%B5%8B%E8%AF%95/"/>
    
    <category term="BFS" scheme="https://blog.foxex.cn/tags/BFS/"/>
    
    <category term="背包问题" scheme="https://blog.foxex.cn/tags/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>char*,const char*,string的转换</title>
    <link href="https://blog.foxex.cn/2020/07/17/char-const-char-string%E7%9A%84%E8%BD%AC%E6%8D%A2/"/>
    <id>https://blog.foxex.cn/2020/07/17/char-const-char-string%E7%9A%84%E8%BD%AC%E6%8D%A2/</id>
    <published>2020-07-17T14:13:27.000Z</published>
    <updated>2020-12-31T13:20:10.603Z</updated>
    
    <content type="html"><![CDATA[<h1 id="思考起因"><a href="#思考起因" class="headerlink" title="思考起因"></a>思考起因</h1><p>这其实又是一篇主要记录过程的博客。</p><p>这次引起我对这一块内容的思考的是我自己出的一道题。但是因为这道题以后可能要用于考试，所以暂时不公布具体题目。</p><p>总之，在做这道题的时候，又用到了我上次说到的运算符重载。</p><p>可是，这次要计算的数字极其巨大，很可能会爆<code>string</code>。</p><p>所以我这次只好使用<code>char*</code>来重载运算符。</p><p>由于直接使用<code>char*</code>运算，在最后不容易把各位合起来（速度较慢），所以我只好选择在合并时，先使用string储存，再把多个string合并到一个<code>char*</code>中。</p><p>这样，就会涉及到<code>string</code>与<code>char*</code>之间的转换。</p><h1 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h1><p>我以前从来没有使用过<code>string</code>到<code>char*</code>的转换，对这一块非常不熟悉。于是便去网上搜。</p><p>先是看到了这个：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">char</span>* charstr;</span><br><span class="line">charstr=str.c_str();</span><br></pre></td></tr></table></figure><p>发现并不能解决问题。</p><p>IDE给我的提示是不能使用<code>const char*</code>赋值给<code>char*</code>。</p><p>自然想到了可以这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> str;</span><br><span class="line"><span class="keyword">char</span>* charstr;</span><br><span class="line">charstr=(<span class="keyword">char</span>*)str.c_str();</span><br></pre></td></tr></table></figure><p>这一次虽然IDE并没有说我语法错误，可是实际效果是仍无法赋值。</p><p>从网上又发现了这样的一个函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str.data()</span><br></pre></td></tr></table></figure><p>这个函数返回的是一个<code>string</code>除了末尾的<code>‘\0’</code>之外的字符串。</p><p>结果使用之后仍然是返回的<code>const char*</code>，无法赋值。</p><p>后来我又从网上的一篇博客中意识到了<code>const char*</code>无法给<code>char*</code>赋值的原因：</p><p>因为<code>const char*</code>和<code>char*</code>都是指针，如果赋值的话，<code>char*</code>也会指向<code>const char*</code>，这样就会造成<code>const char*</code> 的值被<code>char*</code>改变。</p><p>所以，想使用<code>const char*</code>给<code>char*</code>赋值，其实是不可能的。</p><p>但是有一个函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>()</span><br></pre></td></tr></table></figure><p>所以我们就可以在定义<code>char*</code>的时候先new出来一块新的空间，然后再<code>strcpy</code>一下即可。</p><p>这样问题就解决了。</p><p>（虽然看起来很简单，但是我调试了将近一天的时间）</p><h1 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h1><p>所以我们使用<code>string</code>转换为<code>char*</code>的时候，只需要先写一个<code>c_str()</code>，然后再使用<code>strcpy()</code>复制即可。</p>]]></content>
    
    
    <summary type="html">关于char*,const char*,string之间的转换。</summary>
    
    
    
    <category term="C++基础" scheme="https://blog.foxex.cn/categories/C-%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="字符串" scheme="https://blog.foxex.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="C++基础" scheme="https://blog.foxex.cn/tags/C-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>关于我</title>
    <link href="https://blog.foxex.cn/2020/07/11/About/"/>
    <id>https://blog.foxex.cn/2020/07/11/About/</id>
    <published>2020-07-10T16:00:00.000Z</published>
    <updated>2020-07-10T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>我是山东的一名OIer。（极其蒟</p><p>目前高一，距离AFO还远。</p><p>所以近期是不会停更的。$$rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++^{rp++}}}}}}}}}}}}}}}<em>{rp++</em>{rp++<em>{rp++</em>{rp++<em>{rp++</em>{rp++<em>{rp++</em>{rp++<em>{rp++</em>{rp++<em>{rp++</em>{rp++<em>{rp++</em>{rp++_{rp++}}}}}}}}}}}}}}}$$</p>]]></content>
    
    
    <summary type="html">关于我的简介。</summary>
    
    
    
    <category term="关于" scheme="https://blog.foxex.cn/categories/%E5%85%B3%E4%BA%8E/"/>
    
    
    <category term="About" scheme="https://blog.foxex.cn/tags/About/"/>
    
  </entry>
  
  <entry>
    <title>P3372【模板】线段树1</title>
    <link href="https://blog.foxex.cn/2020/07/06/P3372%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%911/"/>
    <id>https://blog.foxex.cn/2020/07/06/P3372%E3%80%90%E6%A8%A1%E6%9D%BF%E3%80%91%E7%BA%BF%E6%AE%B5%E6%A0%911/</id>
    <published>2020-07-05T16:00:00.000Z</published>
    <updated>2020-12-31T13:17:20.733Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="P3372-【模板】线段树-1"><a href="#P3372-【模板】线段树-1" class="headerlink" title="P3372 【模板】线段树 1"></a>P3372 【模板】线段树 1</h2><p>####题目描述</p><p>如题，已知一个数列，你需要进行下面两种操作：</p><ol><li>将某区间每一个数加上 k。</li><li>求出某区间每一个数的和。</li></ol><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含两个整数<code> n</code>, <code>m</code>，分别表示该数列数字的个数和操作的总个数。</p><p>第二行包含<code> n</code> 个用空格分隔的整数，其中第 i 个数字表示数列第 i 项的初始值。</p><p>接下来 <code>m</code> 行每行包含 3 或 4 个整数，表示一个操作，具体如下：</p><ol><li><code> 1 x y k</code>：将区间 [x, y][x,y] 内每个数加上 kk。</li><li><code> 2 x y</code>：输出区间 [x, y][x,y] 内每个数的和。</li></ol><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出包含若干行整数，即为所有操作 2 的结果。</p><h4 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">5 5</span><br><span class="line">1 5 4 2 3</span><br><span class="line">2 2 4</span><br><span class="line">1 2 3 2</span><br><span class="line">2 3 4</span><br><span class="line">1 1 5 1</span><br><span class="line">2 1 4</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">11</span><br><span class="line">8</span><br><span class="line">20</span><br></pre></td></tr></table></figure><h4 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明/提示"></a>说明/提示</h4><p>对于 30% 的数据：n≤8，m≤10。<br>对于 70% 的数据：n≤10^3^，m≤10^4^。<br>对于 100% 的数据：1≤n,m≤10^5^。</p><p>保证任意时刻数列中任意元素的和在 [-2<sup>63</sup>, 2<sup>63</sup>)内。</p><p>【样例解释】</p><img src= "/img/loading.gif" data-lazy-src="https://cdn.luogu.com.cn/upload/pic/2251.png" alt="" /><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>不多说了，线段树板子题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1000090</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> nums[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> totN;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> totDO;</span><br><span class="line"><span class="keyword">bool</span> tempquest;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tag;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> value;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> l, r;</span><br><span class="line">    Node* lch, * rch;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">maketag</span><span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        value += (r - l + <span class="number">1</span>) * w;</span><br><span class="line">        tag += w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        value = lch-&gt;value + rch-&gt;value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_down</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!tag)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (lch==<span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Node(l, (l + r) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (rch == <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                Node(((l + r) &gt;&gt; <span class="number">1</span>) + <span class="number">1</span>, r);</span><br><span class="line">            &#125;</span><br><span class="line">            lch-&gt;maketag(tag);</span><br><span class="line">            rch-&gt;maketag(tag);</span><br><span class="line">            tag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    Node(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> L, <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> R)</span><br><span class="line">    &#123;</span><br><span class="line">        l = L;</span><br><span class="line">        r = R;</span><br><span class="line">        <span class="keyword">if</span> (l == r)</span><br><span class="line">        &#123;</span><br><span class="line">            value = nums[l];</span><br><span class="line">            lch = <span class="literal">NULL</span>;</span><br><span class="line">            rch = <span class="literal">NULL</span>;</span><br><span class="line">            tag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            tag = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            lch = <span class="keyword">new</span> Node(L, mid);</span><br><span class="line">            rch = <span class="keyword">new</span> Node(mid + <span class="number">1</span>, R);</span><br><span class="line">            push_up();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">in_range</span><span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> L, <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (L &lt;= l) &amp;&amp; (R &gt;= r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">out_of_range</span><span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> L, <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (l &gt; R) || (r &lt; L);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> L, <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> R, <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (in_range(L, R))</span><br><span class="line">        &#123;</span><br><span class="line">            maketag(w);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!out_of_range(L, R))</span><br><span class="line">        &#123;</span><br><span class="line">            push_down();</span><br><span class="line">            lch-&gt;update(L, R, w);</span><br><span class="line">            rch-&gt;update(L, R, w);</span><br><span class="line">            push_up();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">quest_range_sum</span><span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> L, <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> R)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (in_range(L, R))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (out_of_range(L, R))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        push_down();</span><br><span class="line">        <span class="keyword">return</span> lch-&gt;quest_range_sum(L, R) + rch-&gt;quest_range_sum(L, R);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">short</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch&gt;<span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>);</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span>&amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> f[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> tmp = x;</span><br><span class="line">    <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = -tmp;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        f[s++] = tmp % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        tmp /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (s &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(f[--s]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    totN = read();</span><br><span class="line">    totDO = read();</span><br><span class="line">    <span class="keyword">int</span> temp;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= totN; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        nums[i] = read();</span><br><span class="line">    &#125;</span><br><span class="line">    Node* root = <span class="keyword">new</span> Node(<span class="number">1</span>, totN);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= totDO; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        tempquest = read() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (!tempquest)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> tempL = read();</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> tempR = read();</span><br><span class="line">            <span class="keyword">auto</span> tempW = read();</span><br><span class="line">            root-&gt;update(tempL, tempR, tempW);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> tempL = read();</span><br><span class="line">            <span class="keyword">auto</span> tempR = read();</span><br><span class="line">            write(root-&gt;quest_range_sum(tempL, tempR));</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//LikiBlaze Code</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;h2 id=&quot;P3372-【模板】线段树-1&quot;&gt;&lt;a href=&quot;#P3372-【模板】线段树-1&quot; class=&quot;headerlink&quot; ti</summary>
      
    
    
    
    
    <category term="算法概述" scheme="https://blog.foxex.cn/tags/%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/"/>
    
    <category term="洛谷" scheme="https://blog.foxex.cn/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="线段树" scheme="https://blog.foxex.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>洛谷P6492COCI2010-2011#6STEP</title>
    <link href="https://blog.foxex.cn/2020/07/05/%E6%B4%9B%E8%B0%B7P6492COCI2010-2011#6STEP/"/>
    <id>https://blog.foxex.cn/2020/07/05/%E6%B4%9B%E8%B0%B7P6492COCI2010-2011#6STEP/</id>
    <published>2020-07-04T16:00:00.000Z</published>
    <updated>2020-12-31T13:18:12.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个长度为 <code>n</code> 的字符序列 <code>a</code>，初始时序列中全部都是字符 <code>L</code>。</p><p>有 <code>q</code> 次修改，每次给定一个 <code>x</code>，若$$ a_{x}$$ 为 <code>L</code>，则将 $$a_{x}$$​ 修改成 <code>R</code>，否则将 $$a_{x}$$​ 修改成 <code>L</code>。</p><p>对于一个只含字符 <code>L</code>，<code>R</code> 的字符串 ss，若其中不存在连续的 <code>L</code> 和 <code>R</code>，则称 <code>s</code> 满足要求。</p><p>每次修改后，请输出当前序列 <code>a</code> 中最长的满足要求的连续子串的长度。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行有两个整数，分别表示序列的长度 <code>n</code> 和修改操作的次数<code> q</code>。</p><p>接下来 <code>q</code> 行，每行一个整数，表示本次修改的位置<code> x</code>。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>对于每次修改操作，输出一行一个整数表示修改 <code>a</code> 中最长的满足要求的子串的长度。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span> <span class="number">2</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span> <span class="number">5</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure><h2 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明/提示"></a>说明/提示</h2><h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><p>对于全部的测试点，保证 1≤n,q≤2×105，1 ≤ x ≤ n。</p><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>题目译自 <a href="https://hsin.hr/coci/archive/2010_2011/">COCI2010-2011</a> <a href="https://hsin.hr/coci/archive/2010_2011/contest6_tasks.pdf">CONTEST #6</a> <strong>T5 STEP</strong>，翻译来自 @<a href="https://www.luogu.com.cn/user/65363">一扶苏一</a>。</p><h1 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h1><p>这个题其实和区间和区别并不大，只是把求和的push_up操作改为求最长的连续符合条件的串即可。</p><p>分左，中，右三部分考虑。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> x = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> f = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span> (ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            f = <span class="number">-1</span>;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        x = (x &lt;&lt; <span class="number">1</span>) + (x &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>);</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> x * f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span>&amp; x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> f[<span class="number">100</span>];</span><br><span class="line">    <span class="keyword">int</span> tmp = x;</span><br><span class="line">    <span class="keyword">if</span> (tmp &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tmp = -tmp;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (tmp &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        f[s++] = tmp % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        tmp /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (s &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">putchar</span>(f[--s]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">1000090</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> nums[MAXN];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> totN;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> totDO;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> lvalue;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> rvalue;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> midvalue;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> l, r;</span><br><span class="line">    Node* lch, * rch;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">push_up</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        lvalue=lch-&gt;lvalue;</span><br><span class="line">        rvalue=rch-&gt;rvalue;</span><br><span class="line">        <span class="keyword">if</span> (nums[lch-&gt;r]!=nums[rch-&gt;l])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (lch-&gt;lvalue==(lch-&gt;r-lch-&gt;l+<span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                lvalue+=rch-&gt;lvalue;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (rch-&gt;rvalue==(rch-&gt;r-rch-&gt;l+<span class="number">1</span>))</span><br><span class="line">            &#123;</span><br><span class="line">                rvalue+=lch-&gt;rvalue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        midvalue=max(nums[lch-&gt;r]!=nums[rch-&gt;l]?lch-&gt;rvalue+rch-&gt;lvalue:<span class="number">0</span>,max(lch-&gt;midvalue,rch-&gt;midvalue));</span><br><span class="line">    &#125;</span><br><span class="line">    Node(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> L, <span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> R)</span><br><span class="line">    &#123;</span><br><span class="line">        l = L;</span><br><span class="line">        r = R;</span><br><span class="line">        <span class="keyword">if</span> (l==r)</span><br><span class="line">        &#123;</span><br><span class="line">            lch = <span class="literal">NULL</span>;</span><br><span class="line">            rch = <span class="literal">NULL</span>;</span><br><span class="line">            lvalue=rvalue=midvalue=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">long</span> <span class="keyword">long</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            lch = <span class="keyword">new</span> Node(L, mid);</span><br><span class="line">            rch = <span class="keyword">new</span> Node(mid + <span class="number">1</span>, R);</span><br><span class="line">            push_up();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> w)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l==r)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (lch-&gt;r&gt;=w)</span><br><span class="line">        &#123;</span><br><span class="line">            lch-&gt;update(w);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            rch-&gt;update(w);</span><br><span class="line">        &#125;</span><br><span class="line">        push_up();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    totN=read();</span><br><span class="line">    totDO=read();</span><br><span class="line">    Node *root=<span class="keyword">new</span> Node(<span class="number">1</span>,totN);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= totDO; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> tempX=read();</span><br><span class="line">        nums[tempX]^=<span class="number">1</span>;</span><br><span class="line">        root-&gt;update(tempX);</span><br><span class="line">        write(root-&gt;midvalue);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;<span class="comment">//LikiBlaze Code</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h</summary>
      
    
    
    
    
    <category term="洛谷" scheme="https://blog.foxex.cn/tags/%E6%B4%9B%E8%B0%B7/"/>
    
    <category term="线段树" scheme="https://blog.foxex.cn/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>20200608递归测试T2地盘划分题解</title>
    <link href="https://blog.foxex.cn/2020/06/09/20200608%E9%80%92%E5%BD%92%E6%B5%8B%E8%AF%95T2%E5%9C%B0%E7%9B%98%E5%88%92%E5%88%86%E9%A2%98%E8%A7%A3/"/>
    <id>https://blog.foxex.cn/2020/06/09/20200608%E9%80%92%E5%BD%92%E6%B5%8B%E8%AF%95T2%E5%9C%B0%E7%9B%98%E5%88%92%E5%88%86%E9%A2%98%E8%A7%A3/</id>
    <published>2020-06-08T16:00:00.000Z</published>
    <updated>2020-12-31T13:21:55.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><img src= "/img/loading.gif" data-lazy-src="https://img2020.cnblogs.com/blog/1924270/202006/1924270-20200609153230110-1022504966.png" alt="" loading="lazy" /><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><h2 id="递归分析"><a href="#递归分析" class="headerlink" title="递归分析"></a>递归分析</h2><p>首先，看到这个题，我们可以先从样例入手分析。看样例，容易发现每次剩下的长方形的宽就是上次长方形的长减宽，长就是上一个长方形的宽。（如果宽比长大，换一下顺序就可以了）</p><p>那我们就容易想到这道题可以用递归来解决。每次传入剩下的长方形的长和宽就行了。</p><p>直到长和宽有一个是零就可以了。</p><p>到这里，我们就可以写出递归的代码了。</p><h2 id="递归代码"><a href="#递归代码" class="headerlink" title="递归代码"></a>递归代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> totX,totY;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> RESULT;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clac</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> x,<span class="keyword">unsigned</span> <span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;y)<span class="comment">//如果长比宽小，那就交换顺序，否则会出现负数 </span></span><br><span class="line">    &#123;</span><br><span class="line">        swap(x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">0</span>||y==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        RESULT+=y;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(y==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        RESULT+=x;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//优化，如果长和宽有一个是一且都不是零，则还能分成的小正方形个数一定就是另一边的长度 </span></span><br><span class="line">    RESULT++;</span><br><span class="line">    clac(y,x-y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">&quot;territory.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;territory.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;totX&gt;&gt;totY;</span><br><span class="line">    clac(totX,totY);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;RESULT&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    fclose(<span class="built_in">stdin</span>);</span><br><span class="line">    fclose(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="问题-amp-解决方案"><a href="#问题-amp-解决方案" class="headerlink" title="问题&amp;解决方案"></a>问题&amp;解决方案</h2><p>这么有理有据的递归代码，竟然会运行错误！！</p><table><thead><tr><th align="left">测试点</th><th align="left">输入文件</th><th align="left">测试结果</th><th align="left">运行用时</th><th align="left">内存消耗</th><th align="left">得分</th></tr></thead><tbody><tr><td align="left">#1</td><td align="left">territory1.in</td><td align="left">答案正确</td><td align="left">0.000 s</td><td align="left">2.543 MB</td><td align="left">10</td></tr><tr><td align="left">#2</td><td align="left">territory2.in</td><td align="left">答案正确</td><td align="left">0.000 s</td><td align="left">2.543 MB</td><td align="left">10</td></tr><tr><td align="left">#3</td><td align="left">territory3.in</td><td align="left">答案正确</td><td align="left">0.000 s</td><td align="left">2.535 MB</td><td align="left">10</td></tr><tr><td align="left">#4</td><td align="left">territory4.in</td><td align="left">答案正确</td><td align="left">0.000 s</td><td align="left">2.539 MB</td><td align="left">10</td></tr><tr><td align="left">#5</td><td align="left">territory5.in</td><td align="left">答案正确</td><td align="left">0.000 s</td><td align="left">2.535 MB</td><td align="left">10</td></tr><tr><td align="left">#6</td><td align="left">territory6.in</td><td align="left">答案正确</td><td align="left">0.000 s</td><td align="left">2.539 MB</td><td align="left">10</td></tr><tr><td align="left">#7</td><td align="left">territory7.in</td><td align="left">答案正确</td><td align="left">0.000 s</td><td align="left">2.539 MB</td><td align="left">10</td></tr><tr><td align="left">#8</td><td align="left">territory8.in</td><td align="left">运行时错误</td><td align="left">不可用</td><td align="left">不可用</td><td align="left">0</td></tr><tr><td align="left">#9</td><td align="left">territory9.in</td><td align="left">答案正确</td><td align="left">0.000 s</td><td align="left">3.547 MB</td><td align="left">10</td></tr><tr><td align="left">#10</td><td align="left">territory10.in</td><td align="left">答案正确</td><td align="left">0.000 s</td><td align="left">2.566 MB</td><td align="left">10</td></tr></tbody></table><p>康康测试点8的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 10000000</span><br></pre></td></tr></table></figure><p>！！！！！</p><p>这么大的数据，结合上面的运行错误，明显这是爆栈了。</p><p>看来这个题不能使用递归。（那为什么还是递归测试[doge]）</p><p>明显只能使用循环了。</p><p>也很好写，只需要把刚才传入长和宽改为把长和宽存储在变量中，每次直接调用就可以了。</p><h1 id="终极代码"><a href="#终极代码" class="headerlink" title="终极代码"></a>终极代码</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(3)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,m,ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">&quot;territory.in&quot;</span>,<span class="string">&quot;r&quot;</span>,<span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;territory.out&quot;</span>,<span class="string">&quot;w&quot;</span>,<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">while</span>(n&amp;&amp;m)</span><br><span class="line">    &#123;</span><br><span class="line">        ans++;</span><br><span class="line">        <span class="keyword">if</span>(n==m)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n&gt;m)</span><br><span class="line">        &#123;</span><br><span class="line">            n-=m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            m-=n;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;img src= &quot;/img/loading.gif&quot; data-lazy-src=&quot;https://img2020.cnblogs.com/b</summary>
      
    
    
    
    
    <category term="递归" scheme="https://blog.foxex.cn/tags/%E9%80%92%E5%BD%92/"/>
    
    <category term="校内考试" scheme="https://blog.foxex.cn/tags/%E6%A0%A1%E5%86%85%E8%80%83%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>关于各种背包问题</title>
    <link href="https://blog.foxex.cn/2020/05/22/%E5%85%B3%E4%BA%8E%E5%90%84%E7%A7%8D%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>https://blog.foxex.cn/2020/05/22/%E5%85%B3%E4%BA%8E%E5%90%84%E7%A7%8D%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</id>
    <published>2020-05-21T16:00:00.000Z</published>
    <updated>2020-07-12T01:54:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><h2 id="嗯……背包问题是什么？"><a href="#嗯……背包问题是什么？" class="headerlink" title="嗯……背包问题是什么？"></a>嗯……背包问题是什么？</h2><p>背包问题，是动态规划问题中的典型的一类。顾名思义，是跟背包有关的问题（竟然和名字有关，爷青结）。</p><p>大概就是讲背包空间有限，怎样合理地装物品可以让总价值最高的问题。</p><p>其实也不是非常难。</p><h2 id="本文讲哪几类？"><a href="#本文讲哪几类？" class="headerlink" title="本文讲哪几类？"></a>本文讲哪几类？</h2><p>背包问题的主要难点也就在于种类繁多，需要记忆各种递推公式、循环结构。</p><p>不过毕竟是记忆而已，总是比其他需要现场推倒递推公式的要好不少。</p><p>本文主要讲以下几类：</p><p><strong>01背包问题</strong></p><p><strong>完全背包问题</strong></p><p><strong>多重背包问题</strong></p><p><strong>二维费用背包问题</strong></p><p><strong>分组背包问题</strong></p><h1 id="01背包问题"><a href="#01背包问题" class="headerlink" title="01背包问题"></a>01背包问题</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h4 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h4><p>一个旅行者有一个最多能装M公斤的背包，现在有n件物品，它们的重量分别是$$W_{1}$$，$$W_{2}$$，…,$$W_{n}$$,它们的价值分别为$$C_{1}$$,$$C_{2}$$,…,$$C_{n}$$，求旅行者能获得最大总价值。</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><p>第一行：两个整数，M(背包容量，M≤200)和N(物品数量，N≤30)；</p><p>第2~N+1行：每行二个整数$$W_{i}$$ ,$$ C_{i}$$表示每个物品的重量和价值。</p><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><p>仅一行，一个数，表示最大总价值。</p><p>输入样例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">7</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><p>输出样例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><h2 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h2><p>既然要用用动态规划法解决0-1背包问题，我们就先定义动态规划的三个要点，即状态、状态转移方程和边界条件。</p><p>首先我们用子问题定义状态，我们用F(i,j)表示把前i件物品放入容量为j的背包中的最大总重量。</p><p>然后我们要考虑怎样的状态转移方程可以把这个问题转化为更小的子问题。我们依然以每一个物品都有放或不放两种选择的策略为基础，考虑第i件物品，如果我们选择不放第i件物品，那么问题就直接转化为把前i-1件物品放入容量为j的背包中的最大总重量，如果我们选择放第i件物品，那么问题就转化为把前i-1件物品放入容量为j-V[i]的背包中的最大总重量加上第i件物品的重量（这里值得注意的一点是，如果j-V[i]&lt;0，即放入第i件物品后超过了背包容量的限制，那么我们就只能选择不放第i件物品了）。所以状态转移方程为</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">F(i,j)=max&#123;F(i<span class="number">-1</span>,j),F(i<span class="number">-1</span>,j-V[i])+W[i]&#125;</span><br></pre></td></tr></table></figure><p>边界条件则很容易得到，i=0时<code>F(i,j)</code>为0（没有物品就没有重量），j&lt;0时<code>F(i,j)</code>为负无穷（但在代码中并不会这样初始化，我们在<code>j-V[i]&lt;0</code>时不计算第二种情况即可）。最终答案则是<code>f(n,C)</code>。但其实这个空间复杂度是可以优化的。</p><p>可以直接用<code>f[i]</code>来表示当重量为i时，可以有的最大价值。</p><p>状态转移方程：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f[j] = max(f[j], f[j-c[i]]+w[i])</span><br></pre></td></tr></table></figure><p>到了这里，终于要讲循环顺序的问题了。</p><p>其实第二层循环为什么要反向的问题，我也研究了好久，终于在看一篇文章的时候恍然大悟。</p><p>根据题意，每种物品只有一件。</p><p>当我们循环的时候，如果正序，那自然就会从前到后的更新数组。</p><p>那如果背包容量大于某件物品的多倍呢？</p><p>而恰好这件物品性价比很高？</p><p>假设a是一个常数。这件物品的质量为w。</p><p>那么，比如说，我们在循环到i=a的时候，把这件物品装进了背包。</p><p>那再循环到i=a+w的时候，可能又会把这件物品装进背包。</p><p>也就是说，这件物品被使用了两次，甚至后面可能更多。</p><p>而根据题意，每件物品只有一个。</p><p>而对于每一次更新，只会用到i比当前小的数据，而不会用到i比当前大的。（因为要查看<code>f[i-w[j]]</code>,w[j]不可能是负的）</p><p>所以，先把大的更新了是没有问题的。</p><p>（学了背包问题这么久，终于把这个问题解决了！！！开心！！！）</p><h2 id="核心代码："><a href="#核心代码：" class="headerlink" title="核心代码："></a>核心代码：</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[M], c[M], w[M];</span><br><span class="line"><span class="keyword">int</span> ans, v, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;v, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;c[i], &amp;w[i]);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = v; j &gt;= c[i]; j--) </span><br><span class="line">        &#123;</span><br><span class="line">            f[j] = max(f[j], f[j-c[i]]+w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, f[v]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="完全背包问题"><a href="#完全背包问题" class="headerlink" title="完全背包问题"></a>完全背包问题</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>设有n种物品，每种物品有一个重量及一个价值。但每种物品的数量是无限的，同时有一个背包，最大载重量为M，今从n种物品中选取若干件(同一种物品可以多次选取)，使其重量的和小于等于M，而价值的和为最大。</p><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h4><p>第一行：两个整数，M(背包容量，M≤200)和N(物品数量，N≤30)；</p><p>第2~N+1行：每行二个整数$$W_{i}$$，$$C_{i}$$表示每个物品的重量和价值。</p><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h4><p>仅一行，一个数，表示最大总价值。</p><p>输入样例</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">4</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span></span><br><span class="line"><span class="number">7</span> <span class="number">9</span></span><br></pre></td></tr></table></figure><h4 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max=<span class="number">12</span></span><br></pre></td></tr></table></figure><h2 id="讲解-1"><a href="#讲解-1" class="headerlink" title="讲解"></a>讲解</h2><p>那么，既然刚才讲了01背包因为每种物品只有一个所以只能逆序循环，完全背包问题自然就是把循环顺序改为顺序就可以了！</p><p>——就这？就这？就这？</p><p>——对，就这。</p><p>——啊这，泪目</p><p>[doge]</p><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[M], c[M], w[M];</span><br><span class="line"><span class="keyword">int</span> ans, v, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;v, &amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;c[i], &amp;w[i]);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = c[i]; j &lt;= v; j++) </span><br><span class="line">        &#123;</span><br><span class="line">            f[j] = max(f[j], f[j-c[i]]+w[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max=%d\n&quot;</span>, f[v]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="多重背包问题"><a href="#多重背包问题" class="headerlink" title="多重背包问题"></a>多重背包问题</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>为了庆贺班级在校运动会上取得全校第一名成绩，班主任决定开一场庆功会，为此拨款购买奖品犒劳运动员。期望拨款金额能购买最大价值的奖品，可以补充他们的精力和体力。</p><h4 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h4><p>第一行二个数<code>n</code>(n≤500)，<code>m</code>(m≤6000)，其中n代表希望购买的奖品的种数，m表示拨款金额。</p><p>接下来n行，每行3个数，<code>v</code>、<code>w</code>、<code>s</code>，分别表示第I种奖品的价格、价值（价格与价值是不同的概念）和能购买的最大数量（买0件到s件均可），其中v≤100，w≤1000，s≤10。</p><h4 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h4><p>一行：一个数，表示此次购买能获得的最大的价值（注意！不是价格）。</p><h4 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">5 1000</span><br><span class="line">80 20 4</span><br><span class="line">40 50 9</span><br><span class="line">30 50 7</span><br><span class="line">40 30 6</span><br><span class="line">20 20 1</span><br></pre></td></tr></table></figure><h4 id="输出样例-1"><a href="#输出样例-1" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1040</span><br></pre></td></tr></table></figure><h2 id="讲解-2"><a href="#讲解-2" class="headerlink" title="讲解"></a>讲解</h2><p>其实多重背包问题，虽然一个物品有了好几个，但是仍然可以按照01背包问题的思路，每个物品能取几件就存储几次就好了（当做不同的物品）</p><h2 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> M 1000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> f[M], c[M], w[M],num[M];</span><br><span class="line"><span class="keyword">int</span> ans, v, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;v, &amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;c[i], &amp;w[i],&amp;num[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> jjc=m;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= num[i]; ++j)</span><br><span class="line">            &#123;</span><br><span class="line">                c[jjc]=c[i];</span><br><span class="line">                w[jjc]=w[i];</span><br><span class="line">                jjc++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = c[i]; j &lt;= v; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                f[j] = max(f[j], f[j-c[i]]+w[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;max=%d\n&quot;</span>, f[v]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二维费用背包问题"><a href="#二维费用背包问题" class="headerlink" title="二维费用背包问题"></a>二维费用背包问题</h1><p>##题目</p><h4 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h4><p>宠物小精灵是一部讲述小智和他的搭档皮卡丘一起冒险的故事。</p><p>一天，小智和皮卡丘来到了小精灵狩猎场，里面有很多珍贵的野生宠物小精灵。小智也想收服其中的一些小精灵。然而，野生的小精灵并不那么容易被收服。对于每一个野生小精灵而言，小智可能需要使用很多个精灵球才能收服它，而在收服过程中，野生小精灵也会对皮卡丘造成一定的伤害（从而减少皮卡丘的体力）。当皮卡丘的体力小于等于0时，小智就必须结束狩猎（因为他需要给皮卡丘疗伤），而使得皮卡丘体力小于等于0的野生小精灵也不会被小智收服。当小智的精灵球用完时，狩猎也宣告结束。</p><p>我们假设小智遇到野生小精灵时有两个选择：收服它，或者离开它。如果小智选择了收服，那么一定会扔出能够收服该小精灵的精灵球，而皮卡丘也一定会受到相应的伤害；如果选择离开它，那么小智不会损失精灵球，皮卡丘也不会损失体力。</p><p>小智的目标有两个：主要目标是收服尽可能多的野生小精灵；如果可以收服的小精灵数量一样，小智希望皮卡丘受到的伤害越小（剩余体力越大），因为他们还要继续冒险。</p><p>现在已知小智的精灵球数量和皮卡丘的初始体力，已知每一个小精灵需要的用于收服的精灵球数目和它在被收服过程中会对皮卡丘造成的伤害数目。请问，小智该如何选择收服哪些小精灵以达到他的目标呢？</p><h4 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h4><p>输入数据的第一行包含三个整数：N(0&lt;N&lt;1000)，M(0&lt;M&lt;500)，K(0&lt;K&lt;100)，分别代表小智的精灵球数量、皮卡丘初始的体力值、野生小精灵的数量。</p><p>之后的K行，每一行代表一个野生小精灵，包括两个整数：收服该小精灵需要的精灵球的数量，以及收服过程中对皮卡丘造成的伤害。</p><h4 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h4><p>输出为一行，包含两个整数：C，R，分别表示最多收服C个小精灵，以及收服C个小精灵时皮卡丘的剩余体力值最多为R。</p><h4 id="输入样例-01"><a href="#输入样例-01" class="headerlink" title="输入样例#01"></a>输入样例#01</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">100</span> <span class="number">5</span></span><br><span class="line"><span class="number">7</span> <span class="number">10</span></span><br><span class="line"><span class="number">2</span> <span class="number">40</span></span><br><span class="line"><span class="number">2</span> <span class="number">50</span></span><br><span class="line"><span class="number">1</span> <span class="number">20</span></span><br><span class="line"><span class="number">4</span> <span class="number">20</span></span><br></pre></td></tr></table></figure><h4 id="输出样例-01"><a href="#输出样例-01" class="headerlink" title="输出样例#01"></a>输出样例#01</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">30</span></span><br></pre></td></tr></table></figure><h4 id="输入样例-02"><a href="#输入样例-02" class="headerlink" title="输入样例#02"></a>输入样例#02</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span> <span class="number">100</span> <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="number">8</span> <span class="number">110</span></span><br><span class="line"></span><br><span class="line"><span class="number">12</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="number">20</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> <span class="number">200</span></span><br><span class="line"></span><br><span class="line"><span class="number">1</span> <span class="number">110</span></span><br></pre></td></tr></table></figure><p>####输出样例#02</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">100</span></span><br></pre></td></tr></table></figure><h4 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h4><p>对于样例输入2：小智一个小精灵都没法收服，皮卡丘也不会收到任何伤害，所以输出<code>0 100</code>。</p><h1 id="分组背包问题"><a href="#分组背包问题" class="headerlink" title="分组背包问题"></a>分组背包问题</h1><h2 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h2><h4 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h4><p>一个旅行者有一个最多能装V公斤的背包，现在有n件物品，它们的重量分别是$$W_{1}$$，$$W_{2}$$，…,$$W_{n}$$,它们的价值分别为$$C_{1}$$,$$C_{2}$$,…,$$C_{n}$$，这些物品被划分为若干组，每组中的物品互相冲突，最多选一件。求解将哪些物品装入背包可使这些物品的费用总和不超过背包容量，且价值总和最大。</p><h4 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h4><p>第一行：三个整数，<code>V</code>(背包容量，V≤200)，<code>N</code>(物品数量，N≤30)和<code>T</code>(最大组号，T≤10)；</p><p>第2~N+1行：每行三个整数$$W_{i}$$,$$C_{i}$$,$$P_{i}$$表示每个物品的重量，价值，所属组号。</p><h4 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h4><p>仅一行，一个数，表示最大总价值。</p><h4 id="输入样例-1"><a href="#输入样例-1" class="headerlink" title="输入样例"></a>输入样例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">10 6 3</span><br><span class="line">2 1 1</span><br><span class="line">3 3 1</span><br><span class="line">4 8 2</span><br><span class="line">6 9 2</span><br><span class="line">2 8 3</span><br><span class="line">3 9 3</span><br></pre></td></tr></table></figure><h4 id="输出样例-2"><a href="#输出样例-2" class="headerlink" title="输出样例"></a>输出样例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">关于背包问题的讲解。</summary>
    
    
    
    <category term="背包问题" scheme="https://blog.foxex.cn/categories/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
    
    <category term="背包问题" scheme="https://blog.foxex.cn/tags/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>57级返校测试-T3-成绩单</title>
    <link href="https://blog.foxex.cn/2020/05/17/57%E7%BA%A7%E8%BF%94%E6%A0%A1%E6%B5%8B%E8%AF%95-T3-%E6%88%90%E7%BB%A9%E5%8D%95/"/>
    <id>https://blog.foxex.cn/2020/05/17/57%E7%BA%A7%E8%BF%94%E6%A0%A1%E6%B5%8B%E8%AF%95-T3-%E6%88%90%E7%BB%A9%E5%8D%95/</id>
    <published>2020-05-16T16:00:00.000Z</published>
    <updated>2020-12-31T13:16:13.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目："><a href="#题目：" class="headerlink" title="题目："></a>题目：</h1><img src= "/img/loading.gif" data-lazy-src="https://img2020.cnblogs.com/blog/1924270/202005/1924270-20200517171801823-1454752520.png" alt="" /><h2 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h2><p>今天大家返校参加考试，本来信心满满以为能拿400分自己再提交一下试试吧！</p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>又考试了，这次考试的人数特别多，每个人的学号很特别，是用字符串表示的（不超过 30 位），每次考试结束后，成绩统计是一件很重要的事情。 老师们都很关心学生的成绩，于是他们把学生的成绩按学号排列(字典顺序，学号全为 小写字母，从小到大排列)（不排成绩），并统计各个分数，及分数段的人数，以及满分人员 （满分要奖励 XXX 奖学金的）。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行：一个数 n （n&lt;=130000 人）。 以下 n 行：每行两个信息，分别为学号，分数（1~150 分）</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>第一行：各个分数段（空格隔开）（例如 1<del>10 11</del>20（见例样，不包括 150 分 的人数）。 第二行：各个分数段的人数（空格隔开，没有则输出 0）。 </p><p>接下来的 n 行，分别为 n 个学生的学号，成绩，（空格隔开）。 再接下来的一行为满分的人的人数 x（如果没有则为 0）（保证 x 不超过 10000）。 </p><p>接下来的 x 行为满分人的学号（如果 x 为 0 则为一行No）（按字典序从小到大排序）。</p><p> 注意：一行若有多个数据，每一个数据之间用空格隔开，最后一个数据后不允许有空格。 分数段中没有 0 分和 150 分的。</p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>恩，这个是我们一道测试题。本来信心满满感觉挺简单，能AC的，结果直接爆零</p><p>结果最后就是一个字符串比较的问题</p><p>研究一阵子才发现可以直接用大于小于号</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> xh;</span><br><span class="line">    <span class="keyword">int</span> fs;</span><br><span class="line">&#125;student[<span class="number">150000</span>];</span><br><span class="line"><span class="keyword">int</span> jiance=<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(stu a,stu b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a.xh&lt;b.xh;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    for(int i=1;i&lt;=min(a.xh.length(),b.xh.length());i++)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        if(a.xh[i]&gt;b.xh[i])</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            return 1;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if(a.xh[i]&lt;b.xh[i])</span></span><br><span class="line"><span class="comment">        &#123;</span></span><br><span class="line"><span class="comment">            return 0;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    if(strcmp(a.xh.c_str(),b.xh.c_str())&gt;0)</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        return 0;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    else</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        return 1;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//以上这一部分就是我那时候写的字符串比较还试了好几种反正总之就是莫名不对</span></span><br><span class="line">    <span class="comment">//后来才学到原来字符串也可以直接用大于小于号</span></span><br><span class="line">    <span class="comment">//这道题主要就是学习到这个吧 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fsd[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> flag11=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">int</span> x=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;student[i].xh&gt;&gt;student[i].fs;</span><br><span class="line">        <span class="keyword">if</span>(student[i].fs==<span class="number">150</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            x++;</span><br><span class="line">        &#125;</span><br><span class="line">        fsd[student[i].fs/<span class="number">10</span>+<span class="number">1</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;1~9 10~19 20~29 30~39 40~49 50~59 60~69 70~79 80~89 90~99 100~109 110~119 120~129 130~139 140~149&quot;</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;fsd[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    sort(student,student+n+<span class="number">1</span>,cmp);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;student[j].xh&lt;&lt;<span class="string">&quot; &quot;</span>&lt;&lt;student[j].fs&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;x&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> fbk=<span class="number">1</span>;fbk&lt;=n;fbk++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(student[fbk].fs==<span class="number">150</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;student[fbk].xh&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">            flag11=<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag11)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;No&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>恩</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目：&quot;&gt;&lt;a href=&quot;#题目：&quot; class=&quot;headerlink&quot; title=&quot;题目：&quot;&gt;&lt;/a&gt;题目：&lt;/h1&gt;&lt;img src= &quot;/img/loading.gif&quot; data-lazy-src=&quot;https://img2020.cnblogs.c</summary>
      
    
    
    
    
    <category term="校内考试" scheme="https://blog.foxex.cn/tags/%E6%A0%A1%E5%86%85%E8%80%83%E8%AF%95/"/>
    
    <category term="字符串" scheme="https://blog.foxex.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="排序" scheme="https://blog.foxex.cn/tags/%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>关于运算符重载</title>
    <link href="https://blog.foxex.cn/2020/04/25/%E5%85%B3%E4%BA%8E%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <id>https://blog.foxex.cn/2020/04/25/%E5%85%B3%E4%BA%8E%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/</id>
    <published>2020-04-24T16:00:00.000Z</published>
    <updated>2020-07-12T02:30:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这篇博客可能会比较短，但是这应该是我研究最久的博客之一了。</p><h1 id="思考起因"><a href="#思考起因" class="headerlink" title="思考起因"></a>思考起因</h1><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/07/12/U1jSud.png" alt="" /><p>首先看到这道题，因为位数明显会很大，所以第一个要想到的就是这道题要用到高精。</p><p>当然，用到高精度的题很多。</p><p>而这道题还要用到快速幂。</p><p>同时用到高精和快速幂的题目也很多。</p><p>的确。</p><p>众所周知，在快速幂运算中，要多次用到乘法。所以乘法的简洁性很重要，否则，程序写起来会很麻烦。而我们只想写这样的快速幂：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poww</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>, base = a;</span><br><span class="line">    <span class="keyword">while</span> (b != <span class="number">0</span>) </span><br><span class="line">   &#123;</span><br><span class="line">        <span class="keyword">if</span> (b &amp; <span class="number">1</span> != <span class="number">0</span>)</span><br><span class="line">            ans *= base;</span><br><span class="line">            base *= base;</span><br><span class="line">            b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以后更难的题中，我们还要用到更多高精乘法。</p><p>那怎么办呢？</p><p>这就用到我们的运算符重载了。</p><h1 id="研究历程"><a href="#研究历程" class="headerlink" title="研究历程"></a>研究历程</h1><p>再讲讲我的研究历程吧。</p><p>先是想到要用重载运算符，觉得应该和重载函数是一样的，就自己先写了这个：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> <span class="keyword">operator</span>*(<span class="built_in">string</span> a,<span class="built_in">string</span> b)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发现不太行。</p><p>于是从网上找资料：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">   <span class="keyword">public</span>:</span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="keyword">double</span> <span class="title">getVolume</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">         <span class="keyword">return</span> length * breadth * height;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">setLength</span><span class="params">( <span class="keyword">double</span> len )</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          length = len;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">setBreadth</span><span class="params">( <span class="keyword">double</span> bre )</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          breadth = bre;</span><br><span class="line">      &#125;</span><br><span class="line"> </span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">setHeight</span><span class="params">( <span class="keyword">double</span> hei )</span></span></span><br><span class="line"><span class="function">      </span>&#123;</span><br><span class="line">          height = hei;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 重载 + 运算符，用于把两个 Box 对象相加</span></span><br><span class="line">      Box <span class="keyword">operator</span>+(<span class="keyword">const</span> Box&amp; b)</span><br><span class="line">      &#123;</span><br><span class="line">         Box box;</span><br><span class="line">         box.length = <span class="keyword">this</span>-&gt;length + b.length;</span><br><span class="line">         box.breadth = <span class="keyword">this</span>-&gt;breadth + b.breadth;</span><br><span class="line">         box.height = <span class="keyword">this</span>-&gt;height + b.height;</span><br><span class="line">         <span class="keyword">return</span> box;</span><br><span class="line">      &#125;</span><br><span class="line">   <span class="keyword">private</span>:</span><br><span class="line">      <span class="keyword">double</span> length;      <span class="comment">// 长度</span></span><br><span class="line">      <span class="keyword">double</span> breadth;     <span class="comment">// 宽度</span></span><br><span class="line">      <span class="keyword">double</span> height;      <span class="comment">// 高度</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 程序的主函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   Box Box1;                <span class="comment">// 声明 Box1，类型为 Box</span></span><br><span class="line">   Box Box2;                <span class="comment">// 声明 Box2，类型为 Box</span></span><br><span class="line">   Box Box3;                <span class="comment">// 声明 Box3，类型为 Box</span></span><br><span class="line">   <span class="keyword">double</span> volume = <span class="number">0.0</span>;     <span class="comment">// 把体积存储在该变量中</span></span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Box1 详述</span></span><br><span class="line">   Box1.setLength(<span class="number">6.0</span>); </span><br><span class="line">   Box1.setBreadth(<span class="number">7.0</span>); </span><br><span class="line">   Box1.setHeight(<span class="number">5.0</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Box2 详述</span></span><br><span class="line">   Box2.setLength(<span class="number">12.0</span>); </span><br><span class="line">   Box2.setBreadth(<span class="number">13.0</span>); </span><br><span class="line">   Box2.setHeight(<span class="number">10.0</span>);</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Box1 的体积</span></span><br><span class="line">   volume = Box1.getVolume();</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Volume of Box1 : &quot;</span> &lt;&lt; volume &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Box2 的体积</span></span><br><span class="line">   volume = Box2.getVolume();</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Volume of Box2 : &quot;</span> &lt;&lt; volume &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 把两个对象相加，得到 Box3</span></span><br><span class="line">   Box3 = Box1 + Box2;</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// Box3 的体积</span></span><br><span class="line">   volume = Box3.getVolume();</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Volume of Box3 : &quot;</span> &lt;&lt; volume &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">complex</span> &#123;</span> <span class="comment">//复数类</span></span><br><span class="line"><span class="keyword">public</span>: <span class="comment">//外部接口</span></span><br><span class="line"> <span class="built_in">complex</span>(<span class="keyword">double</span> r = <span class="number">0.0</span>, <span class="keyword">double</span> i = <span class="number">0.0</span>) &#123; real = r; imag = i; &#125; <span class="comment">//构造函数_ </span></span><br><span class="line"> <span class="keyword">const</span> <span class="built_in">complex</span> <span class="keyword">operator</span>+(<span class="keyword">const</span> <span class="built_in">complex</span> &amp;c) <span class="keyword">const</span> ;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">const</span> <span class="built_in">complex</span> <span class="keyword">operator</span> - (<span class="keyword">const</span> <span class="built_in">complex</span> &amp;c) <span class="keyword">const</span>;</span><br><span class="line"> <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>; <span class="comment">//输出复数</span></span><br><span class="line"><span class="keyword">private</span>: <span class="comment">//私有数据成员</span></span><br><span class="line"> <span class="keyword">double</span> real;  <span class="comment">//复数实部</span></span><br><span class="line"> <span class="keyword">double</span> imag;  <span class="comment">//复数虚部</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="built_in">complex</span> <span class="built_in">complex</span>:: <span class="keyword">operator</span>+(<span class="keyword">const</span> <span class="built_in">complex</span> &amp;c) <span class="keyword">const</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">complex</span>(real + c.real, imag + c.imag);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="built_in">complex</span> <span class="built_in">complex</span>:: <span class="keyword">operator</span>-(<span class="keyword">const</span> <span class="built_in">complex</span> &amp;c) <span class="keyword">const</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">complex</span>(real - c.real, imag - c.imag);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">complex::display</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; real &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; imag &lt;&lt; <span class="string">&quot; i)&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> complex c1(5, 4), c2(2,</span><br><span class="line"><span class="number">10</span>), c3; <span class="comment">//三个复数类的对象</span></span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c1=&quot;</span>; c1.display();</span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c2=&quot;</span>; c2.display();</span><br><span class="line"> c3 = c1 + c2; <span class="comment">//使用重载运算符完成复数减法</span></span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c3=c1+c2=&quot;</span>;</span><br><span class="line"> c3.display();</span><br><span class="line"> c3 = c1 - c2; <span class="comment">//使用重载运算符完成复数加法</span></span><br><span class="line"> <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;c3=c1-c2=&quot;</span>;</span><br><span class="line"> c3.display();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>全都是这种。</p><p>这些东西，让我这个连类都不知道是什么的蒟蒻怎么看得懂？！</p><p>继续不停的翻找，还都是这些。</p><p>突然，灵光一现</p><p>以前我在上清北学堂的时候，老师讲过大于、小于号的重载！</p><p>于是又返回去看：</p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/07/12/U1XKfO.jpg" alt="" /><p>终于找到了！就是这个！</p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>这只是一个记录学习历程的博客，所以正文很短。</p><p>所以我们要写的重载高精度乘法就是这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">string</span> <span class="keyword">operator</span>*(<span class="keyword">const</span> <span class="built_in">string</span> &amp;a,<span class="keyword">const</span> <span class="built_in">string</span> &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有这个：</p><img src= "/img/loading.gif" data-lazy-src="https://s1.ax1x.com/2020/07/12/U1XutK.png" alt="" />]]></content>
    
    
    <summary type="html">运算符重载是怎么回事呢？运算符相信大家都很熟悉，但是运算符重载是怎么回事呢，下面就让小编带大家一起了解吧。 运算符重载，其实就是重载运算符，大家可能会很惊讶运算符怎么会重载呢？但事实就是这样，小编也感到非常惊讶。 这就是关于运算符重载的事情了，大家有什么想法呢，欢迎在评论区告诉小编一起讨论哦！</summary>
    
    
    
    <category term="C++基础" scheme="https://blog.foxex.cn/categories/C-%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="C++基础" scheme="https://blog.foxex.cn/tags/C-%E5%9F%BA%E7%A1%80/"/>
    
    <category term="运算符重载" scheme="https://blog.foxex.cn/tags/%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>数据离散化</title>
    <link href="https://blog.foxex.cn/2020/04/18/%E6%95%B0%E6%8D%AE%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    <id>https://blog.foxex.cn/2020/04/18/%E6%95%B0%E6%8D%AE%E7%A6%BB%E6%95%A3%E5%8C%96/</id>
    <published>2020-04-17T16:00:00.000Z</published>
    <updated>2020-07-13T03:18:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>离散化就是把无限空间（或非常大的空间）中有限的个体映射到有限的空间（较小空间）中去，以此提高算法的时空效率。通俗的说，离散化就是在不改变数据相对大小的条件下，对数据进行相应的缩小。</p><p>####栗子</p><p>原始数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8 999 91 100000 0000 15 999 91</span><br></pre></td></tr></table></figure><p>离散化后：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 3 4 2 3</span><br></pre></td></tr></table></figure><p>离散化有什么用处呢？有时候我们需要根据数值的大小开一个数组，由于数值很多，没办法开那么大的数组（大了会超内存限制的），但是数据的个数有限。</p><p>如：有500000个数字，他们的范围是0-2000000000，这样就满足离散化的条件。我们可以把这些数离散化，最小的缩小为1，大小相邻的依次增加1，这样所有的数的范围一定能缩小到1到500000之间，同时不改变相对大小关系。</p><p>####任务</p><p>给你n个整数序列a[1],a[2],..,a[n]。请你在不改变相对大小关系的前提下进行离散化。</p><p>####要求</p><p>1.离散化后，最小的数值为1。<br>2.原序列中相同的数，离散后还应相同。<br>3.大小相邻的两个数离散后相差为1。<br>4.离散后序列相对位置不变。</p><p>###输入</p><p>第一行n 原始数据的个数 。第二行n 个用一个空格隔开的整数 。</p><p>###输出</p><p>一行原序列离散后相应的序列 ，相邻两个数之间一个空格隔开。</p><p>###输入输出样例</p><table><thead><tr><th>discretize.in</th><th>discretize.out</th></tr></thead><tbody><tr><td>8 99991 1000000000 15 99991</td><td>1 3 4 2 3</td></tr></tbody></table><p>###数据范围</p><p>30%的数据： n&lt;100, 0&lt; a[i]&lt;1000;</p><p>100% 的数据： n&lt;500000 0&lt; a[i]&lt;2000000000</p><h1 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>其实就是用一个辅助的数组把你要离散的所有数据存下来。</p><p>然后排序，排序是为了后面的二分。</p><p>去重，因为我们要保证相同的元素离散化后数字相同。</p><p>再用二分把离散化后的数字放回原数组。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1.去重并不是把数组中的元素删去，而是重复的部分元素在数组末尾，去重之后数组的大小要减一</p><p>2.二分的时候，注意二分的区间范围，一定是离散化后的区间</p><p>3.如果需要多个数组同时离散化，那就把这些数组中的数都用数组存下来</p><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//n:原数组大小</span></span><br><span class="line"><span class="comment">//num:原数组中的元素</span></span><br><span class="line"><span class="comment">//lsh:离散化的数组</span></span><br><span class="line"><span class="comment">//cnt:离散化后的数组大小 </span></span><br><span class="line"><span class="keyword">int</span> lsh[MAXN] , cnt , num[MAXN] , n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;num[i]);</span><br><span class="line">    lsh[i] = num[i];    </span><br><span class="line">&#125;</span><br><span class="line">sort(lsh+<span class="number">1</span> , lsh+n+<span class="number">1</span>);</span><br><span class="line">cnt = unique(lsh+<span class="number">1</span> , lsh+n+<span class="number">1</span>) - lsh - <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++)</span><br><span class="line">    num[i] = lower_bound(lsh+<span class="number">1</span> , lsh+cnt+<span class="number">1</span> , num[i]) - lsh;</span><br></pre></td></tr></table></figure><h1 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h1><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>其实就是排序之后，枚举着放回原数组</p><p>用一个结构体存下原数和位置，按照原数排序</p><p>我结构体里面写了个重载，也可以写一个比较函数</p><p>最后离散化后数在rank[]里面</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Node&amp; a) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> data &lt; a.data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Node num[MAXN];</span><br><span class="line"><span class="keyword">int</span> rank[MAXN], n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num[i].data);</span><br><span class="line">    num[i].id = i;</span><br><span class="line">&#125;</span><br><span class="line">sort(num + <span class="number">1</span>, num + n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line">    rank[num[i].id] = i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h1&gt;&lt;h2 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h</summary>
      
    
    
    
    
    <category term="算法概述" scheme="https://blog.foxex.cn/tags/%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/"/>
    
    <category term="离散化" scheme="https://blog.foxex.cn/tags/%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>最短路径问题的几种算法</title>
    <link href="https://blog.foxex.cn/2020/04/18/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98%E7%9A%84%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95/"/>
    <id>https://blog.foxex.cn/2020/04/18/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98%E7%9A%84%E5%87%A0%E7%A7%8D%E7%AE%97%E6%B3%95/</id>
    <published>2020-04-17T16:00:00.000Z</published>
    <updated>2020-07-13T03:19:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Floyd算法"><a href="#Floyd算法" class="headerlink" title="Floyd算法"></a>Floyd算法</h1><h2 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h2><p>可以求出多源最短路，可以处理负权边的情况，但是不能出现负环。</p><h2 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>O（n<sup>3</sup>）</p><h2 id="讲解"><a href="#讲解" class="headerlink" title="讲解"></a>讲解</h2><p>Floyed算法使用的是动态规划的方法。</p><img src= "/img/loading.gif" data-lazy-src="https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200417230554342-692141756.png" alt="" /><img src= "/img/loading.gif" data-lazy-src="https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200417230839931-835750678.png" alt="" /><p>只需要使用最简单粗暴的做法，将出发点、结束点、中转点都枚举一遍就可以了。</p><p>状态转移方程：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d[i][j]=min(d[i][k]+d[k][j],d[i][j])</span><br></pre></td></tr></table></figure><p>这样，再写出Floyd算法的核心代码就很容易了。</p><p>另外需要注意的是：Floyd算法不能解决带有负权回路（或者叫负权环）的图，因为带有负权回路的图没有最短路。例如下面这个图就不存在1号顶点到3号顶点的最短路径。因为1-&gt;2-&gt;3-&gt;1-&gt;2-&gt;3-&gt;-&gt;1-&gt;2-&gt;3这样路径中，每绕一次1-&gt;-2&gt;3这样的环，最短路就会减少1，永远找不到最短路。其实如果一个图中带有负权回路那么这个图则没有最短路。</p><img src= "/img/loading.gif" data-lazy-src="https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200417232000293-1893870874.png" alt="" /><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(k=<span class="number">1</span>;k&lt;=n;k++) <span class="comment">//枚举中转点</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++) <span class="comment">//枚举起点        </span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)          <span class="comment">//枚举终点</span></span><br><span class="line">            d[i][j]=min(d[i][k]+d[k][j],d[i][j]);</span><br></pre></td></tr></table></figure><h1 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h1><h2 id="使用条件-1"><a href="#使用条件-1" class="headerlink" title="使用条件"></a>使用条件</h2><p>求单源最短路径，不能处理负权。</p><h2 id="时间复杂度-1"><a href="#时间复杂度-1" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>O（n<sup>2</sup>）</p><h2 id="讲解-1"><a href="#讲解-1" class="headerlink" title="讲解"></a>讲解</h2><p>Dijkstra算法使用的是贪心方法，d[i]表示起点s0到i的最短距离。</p><p>从起点s0开始，选择未访问过的离s0最近的一个点i，也就是最小的d[i]，因为所以边权为正，不会存在更短的路径到达i，保证了贪心的正确性。然后将i作为中间点，更新经过i可到达的点的最短路距离，继续贪心寻找未访问过的最近的一个点，经过n次贪心，算法结束。</p><p>看图：</p><p><img src= "/img/loading.gif" data-lazy-src="https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200418080223791-1693237628.png" alt="" /><img src= "/img/loading.gif" data-lazy-src="https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200418080234900-1450733756.png" alt="" /></p><p>根据这个图，Dijkstra算法应该就很好理解了。</p><h2 id="核心代码-1"><a href="#核心代码-1" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">&#123;</span><br><span class="line">    maxn = <span class="number">0x7fffffff</span>;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)                 <span class="comment">//找出未访问最小的d[j]</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!vis[j] &amp;&amp; d[j] &lt; maxn)</span><br><span class="line">        &#123;</span><br><span class="line">            maxn = d[j];</span><br><span class="line">            k = i;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    vis[k] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)          <span class="comment">//k作为中间点，更新起点经过k到达其他点的d[j]</span></span><br><span class="line">        <span class="keyword">if</span> (w[k][j])</span><br><span class="line">        &#123;</span><br><span class="line">            d[j] = min&#123; d[k] + w[k][j],d[j] &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="SPFA算法"><a href="#SPFA算法" class="headerlink" title="SPFA算法"></a>SPFA算法</h1><h2 id="使用条件-2"><a href="#使用条件-2" class="headerlink" title="使用条件"></a>使用条件</h2><p>求单源最短路，可以处理负权边</p><h2 id="时间复杂度-2"><a href="#时间复杂度-2" class="headerlink" title="时间复杂度"></a>时间复杂度</h2><p>对于稀疏图，为O(km)，k为较小的常数，而对于稠密图或者构造的网格图，会提高到O(n*m)</p><h2 id="讲解-2"><a href="#讲解-2" class="headerlink" title="讲解"></a>讲解</h2><p>建立一个队列，初始时队列里只有起始点，在建立一个表格记录起始点到所有点的最短路径（该表格的初始值要赋为极大值，该点到他本身的路径赋为0）。然后执行松弛操作，用队列里有的点去刷新起始点到所有点的最短路，如果刷新成功且被刷新点不在队列中则把该点加入到队列最后。重复执行直到队列为空。</p><p>图：</p><img src= "/img/loading.gif" data-lazy-src="https://img2020.cnblogs.com/blog/1924270/202004/1924270-20200418082427765-963504437.png" alt="" /><p>源点A首先入队，并且AB松弛</p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190316204559264.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><p>扩展与A相连的边，B，C 入队并松弛。</p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190316204613979.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190316204625218.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><p>D出队，E入队并松弛。</p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190316204637351.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><p>E出队，此时队列为空，源点到所有点的最短路已被找到，A-&gt;E的最短路即为8</p><img src= "/img/loading.gif" data-lazy-src="https://img-blog.csdnimg.cn/20190316204648479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzkwMjQ0OQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" /><p>以上就是SPFA算法的过程。</p><h2 id="核心代码-2"><a href="#核心代码-2" class="headerlink" title="核心代码"></a>核心代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">q.push(s);</span><br><span class="line">vis[s]=<span class="number">1</span>;  <span class="comment">//源点s入队，标记入队</span></span><br><span class="line"><span class="keyword">while</span>(q.size())</span><br><span class="line">&#123;</span><br><span class="line">       u=q.front();q.pop();vis[u]=<span class="number">0</span>;        <span class="comment">//取出队头，标记未入队</span></span><br><span class="line">       <span class="keyword">for</span>(i=head[u];i;i=next[i])</span><br><span class="line">       &#123;</span><br><span class="line">              v=ver[i];</span><br><span class="line">              w=edge[i];</span><br><span class="line">              <span class="keyword">if</span>(dis[u]+w&lt;dis[v])</span><br><span class="line">              &#123;</span><br><span class="line">                     dis[v]=dis[u]+w;</span><br><span class="line">                     <span class="keyword">if</span>(!vis[v])   &#123;q.push(v);vis[v]=<span class="number">1</span>;&#125;    <span class="comment">//如果没有在队列，入队，标记已入队</span></span><br><span class="line">              &#125;    </span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Floyd算法&quot;&gt;&lt;a href=&quot;#Floyd算法&quot; class=&quot;headerlink&quot; title=&quot;Floyd算法&quot;&gt;&lt;/a&gt;Floyd算法&lt;/h1&gt;&lt;h2 id=&quot;使用条件&quot;&gt;&lt;a href=&quot;#使用条件&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    
    <category term="算法概述" scheme="https://blog.foxex.cn/tags/%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/"/>
    
    <category term="最短路" scheme="https://blog.foxex.cn/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
  <entry>
    <title>莫比乌斯反演</title>
    <link href="https://blog.foxex.cn/2020/03/15/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/"/>
    <id>https://blog.foxex.cn/2020/03/15/%E8%8E%AB%E6%AF%94%E4%B9%8C%E6%96%AF%E5%8F%8D%E6%BC%94/</id>
    <published>2020-03-14T16:00:00.000Z</published>
    <updated>2020-07-13T03:18:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>##莫比乌斯反演相关</p><p>###莫比乌斯函数</p><p>$$<br>\mu(n)=\left{\begin{array}{ll}<br>1 &amp; \text { 若 } n=1 \<br>(-1)^{k} &amp; \text { 若 } n \text { 无平方数因数，且 } n=p_{1} p_{2} \ldots \ldots p_{k} \<br>0 &amp; \text { 若 } n \text { 有大于 } 1 \text { 的平方数因数。 }<br>\end{array}\right.<br>$$</p><p>设f(n)、g(n)是两个数论函数，它们的狄利克雷乘积也是一个数论函数，其定义为：</p><p>$$<br>\begin{aligned}<br>h(n)=&amp; \sum_{d \mid n} f(d) g\left(\frac{n}{d}\right) \<br>&amp; d&gt;0<br>\end{aligned}<br>$$<br>若函数<img src= "/img/loading.gif" data-lazy-src="https://img2020.cnblogs.com/i-beta/1924270/202003/1924270-20200315200806063-1269850754.png" alt="" />满足：<br>$$<br>f(n)=\sum_{d \mid n} g(d)=\sum_{d \mid n} g\left(\frac{n}{d}\right)<br>$$<br>则有<br>$$<br>g(n)=\sum_{d \mid n} \mu(d) f\left(\frac{n}{d}\right)=\sum_{d \mid n} \mu\left(\frac{n}{d}\right) f(d)<br>$$</p><p>###例题</p><p>求1&lt;=i&lt;=n,1&lt;=j&lt;=m，gcd(i,j)==d的对数。</p><p>先让n/=d,m/=d，变成求gcd(i,j)==1的对数。</p><p>$$<br>\begin{array}{l}<br>\sum_{i=1}^{n} \sum_{j=1}^{m}[\operatorname{gcd}(i, j)=1] \<br>=\sum_{i=1}^{n} \sum_{j=1}^{m} \sum_{d \mid \operatorname{gcd}(i, j)}^{\min } \mu(d) \<br>=\sum_{i=1}^{n} \sum_{j=1}^{m} \sum_{d|i, d| j}^{\min } \mu(d) \<br>=\sum_{d=1}^{\min } \mu(d) \sum_{d \mid i}^{n} \sum_{d \mid j}^{m} 1 \<br>=\sum_{d=1}^{\min } \mu(d) \frac{n}{d} \frac{m}{d}<br>\end{array}<br>$$<br>然后预处理出(d)的前缀和，O(sqrt(n))枚举d即可。</p><p>代码</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lli long long int</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">5e4</span>+<span class="number">1e2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mu[maxn];</span><br><span class="line">lli sum[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">gen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> prime[maxn],cnt;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> vis[maxn];</span><br><span class="line">    sum[<span class="number">1</span>] = mu[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;maxn;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>( !vis[i] ) &#123;</span><br><span class="line">            prime[++cnt] = i,</span><br><span class="line">            mu[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=cnt&amp;&amp;i*prime[j]&lt;maxn;j++) &#123;</span><br><span class="line">            vis[i*prime[j]] = <span class="number">1</span>;</span><br><span class="line">            mu[i*prime[j]] = -mu[i];</span><br><span class="line">            <span class="keyword">if</span>( ! ( i % prime[j]) ) &#123;</span><br><span class="line">                mu[i*prime[j]] = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        sum[i] = sum[i<span class="number">-1</span>] + mu[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> lli <span class="title">calc</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    lli ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>( n &gt; m )</span><br><span class="line">        swap(n,m);</span><br><span class="line">    <span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i=pos+<span class="number">1</span>) &#123;</span><br><span class="line">        pos = min( n / ( n / i ) , m / ( m / i ) );</span><br><span class="line">        ret += ( sum[pos] - sum[i<span class="number">-1</span>] ) * ( n / i ) * ( m / i );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">int</span> a,b,d;</span><br><span class="line">    </span><br><span class="line">    gen();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;T);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>( T-- ) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;a,&amp;b,&amp;d);</span><br><span class="line">        a /= d , b /= d;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,calc(a,b));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;##莫比乌斯反演相关&lt;/p&gt;
&lt;p&gt;###莫比乌斯函数&lt;/p&gt;
&lt;p&gt;$$&lt;br&gt;\mu(n)=\left{\begin{array}{ll}&lt;br&gt;1 &amp;amp; \text { 若 } n=1 \&lt;br&gt;(-1)^{k} &amp;amp; \text { 若 } n \tex</summary>
      
    
    
    
    
    <category term="算法概述" scheme="https://blog.foxex.cn/tags/%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/"/>
    
    <category term="数论" scheme="https://blog.foxex.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>2020年3月8日NOIP课程知识整理</title>
    <link href="https://blog.foxex.cn/2020/03/09/2020%E5%B9%B43%E6%9C%888%E6%97%A5NOIP%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <id>https://blog.foxex.cn/2020/03/09/2020%E5%B9%B43%E6%9C%888%E6%97%A5NOIP%E8%AF%BE%E7%A8%8B%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</id>
    <published>2020-03-08T16:00:00.000Z</published>
    <updated>2020-07-13T03:16:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>一、高精度计算</p><p>这一次课程主要讲了高精度加、减、乘。</p><p>首先，定义一个高精度的结构体，储存这个数字的长度、和这个数字本身。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">gaojing</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> n,z[<span class="number">2333</span>];</span><br><span class="line"></span><br><span class="line">    gaojing()</span><br><span class="line">    &#123;</span><br><span class="line">        n=<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">memset</span>(z,<span class="number">0</span>,<span class="keyword">sizeof</span>(z));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> l=<span class="built_in">strlen</span>(s+<span class="number">1</span>);</span><br><span class="line">        reverse(s+<span class="number">1</span>,s+l+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        n = l;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a=<span class="number">1</span>;a&lt;=n;a++)</span><br><span class="line">            z[a] = s[a]-<span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a=n;a&gt;=<span class="number">1</span>;a--)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,z[a]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>1、高精度加法</p><p>只需要将数字当做字符串读入，在一位一位地相加，考虑进位即可。</p><p>这里还需要注意的一点是，我们在写高精计算函数时，参数最好要读取地址，而不是直接读取字符串。这样如果这个字符串很大，参数进入时还要把这个很大的字符串复制一遍，既消耗时间，又消耗内存。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">gaojing <span class="keyword">operator</span>+(<span class="keyword">const</span> gaojing &amp;a,<span class="keyword">const</span> gaojing &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    gaojing c;</span><br><span class="line">    c.n = max(a.n,b.n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c.n;i++)</span><br><span class="line">        c.z[i] = a.z[i] + b.z[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c.n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c.z[i+<span class="number">1</span>] += c.z[i]/<span class="number">10</span>;</span><br><span class="line">        c.z[i] = c.z[i]%<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (c.z[c.n+<span class="number">1</span>] != <span class="number">0</span>) c.n++;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、高精度比较</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> gaojing &amp;a,<span class="keyword">const</span> gaojing &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (a.n!=b.n) <span class="keyword">return</span> a.n&lt;b.n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=a.n;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">        <span class="keyword">if</span> (a.z[i] != b.z[i]) <span class="keyword">return</span> a.z[i]&lt;b.z[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、高精度乘法</p><p>首先，根据<code>十*十=百</code>,<code>十*百=千</code>,<code>千*万=千万</code>可得：</p><p>i位*j位，结果要加到i+j-1位上。</p><p>最后，和高精度加法还有区别的一点是，这个要去除前导零。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">gaojing <span class="keyword">operator</span>*(<span class="keyword">const</span> gaojing &amp;a,<span class="keyword">const</span> gaojing &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    gaojing c;</span><br><span class="line">    c.n = a.n + b.n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=a.n;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=b.n;j++)</span><br><span class="line">            c.z[i+j<span class="number">-1</span>] += a.z[i] * b.z[j];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=c.n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        c.z[i+<span class="number">1</span>] += c.z[i]/<span class="number">10</span>;</span><br><span class="line">        c.z[i] = c.z[i]%<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (c.n != <span class="number">1</span> &amp;&amp; c.z[c.n] == <span class="number">0</span>)</span><br><span class="line">        c.n--;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、高精度减法</p><p>其实思想和高精度加法差不多，只不过要判断正负（用刚才写的比较函数判断即可）。</p><p>代码就不再写了。</p><p>二、求最大公约数、最小公倍数。</p><p>可以用自带函数求最大公约数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">__gcd(a,b)；</span><br></pre></td></tr></table></figure><p>推荐使用手写最大公因数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gcd</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b==<span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> gcd(b,a%b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最小公倍数的话，根据两个数相乘等于他们的gcd*lcm即可求得。</p><p>三、快速幂：</p><p>首先，快速幂的目的就是做到快速求幂，假设我们要求a^b^,按照朴素算法就是把a连乘b次，这样一来时间复杂度是O(b)也即是O(n)级别，快速幂能做到O(logn)，快了好多好多。它的原理如下：</p><p>　　假设我们要求a^b^，那么其实b是可以拆成二进制的，该二进制数第i位的权为2^(i-1)^，例如当b=11时，$$a^{11}=a^{(2^{0}+2^{1}+2^{3})}$$</p><p>11的二进制是1011，11 = 2³×1 + 2²×0 + 2¹×1 + 2º×1，因此，我们将a¹¹转化为算 $$a^{(2^{0})}*a^{(2^{1})}*a^{(2^{3})}$$，看出来快的多了吧原来算11次，现在算三次，但是这三项貌似不好求的样子….不急，下面会有详细解释。</p><p>　　由于是二进制，很自然地想到用位运算这个强大的工具： &amp;  和 &gt;&gt; ，&amp;运算通常用于二进制取位操作，例如一个数 &amp; 1 的结果就是取二进制的最末位。还可以判断奇偶x&amp;1=0为偶，x&amp;1=1为奇。&gt;&gt;运算比较单纯,二进制去掉最后一位</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ksm</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y&amp;<span class="number">1</span>) ans=<span class="number">1l</span>l*ans*x%p;</span><br><span class="line">        x=<span class="number">1l</span>l*x*x%p;</span><br><span class="line">        y&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码很短，死记也可行，但最好还是理解一下吧，其实也很好理解，以b==11为例，b=&gt;1011,二进制从右向左算，但乘出来的顺序是 a^(2^0) * a^(2^1)  * a^(2^3)，是从左向右的。我们不断的让base*=base目的即是累乘，以便随时对ans做出贡献。</p><p>　　其中要理解<code>base*=base</code>这一步，看<code>base*base</code>=base^2^,下一步再乘，就是base^2^*base^2^=base^4^,然后同理  base^4^ * base^4^ = base^8^ ,,,,, see?是不是做到了base–&gt;base^2^–&gt;base^4^–&gt;base^8^–&gt;base^16^–&gt;base^32^…….指数正是 2^i^ 啊，再看上面的例子，$$a^{(2^{0})}*a^{(2^{1})}*a^{(2^{3})}$$，这三项是不是完美解决了，，嗯，快速幂就是这样。</p><p>四、矩阵内容</p><p>（这一部分我已经写过了，这里不再赘述）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;一、高精度计算&lt;/p&gt;
&lt;p&gt;这一次课程主要讲了高精度加、减、乘。&lt;/p&gt;
&lt;p&gt;首先，定义一个高精度的结构体，储存这个数字的长度、和这个数字本身。&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter</summary>
      
    
    
    
    
    <category term="算法概述" scheme="https://blog.foxex.cn/tags/%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/"/>
    
    <category term="数论" scheme="https://blog.foxex.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>递推;矩阵加速</title>
    <link href="https://blog.foxex.cn/2020/03/03/%E9%80%92%E6%8E%A8;%E7%9F%A9%E9%98%B5%E5%8A%A0%E9%80%9F/"/>
    <id>https://blog.foxex.cn/2020/03/03/%E9%80%92%E6%8E%A8;%E7%9F%A9%E9%98%B5%E5%8A%A0%E9%80%9F/</id>
    <published>2020-03-02T16:00:00.000Z</published>
    <updated>2020-07-13T03:17:18.000Z</updated>
    
    <content type="html"><![CDATA[<img src= "/img/loading.gif" data-lazy-src="https://img2020.cnblogs.com/blog/1924270/202003/1924270-20200303084213350-258204603.png" alt="" /><p>这个题其实很简单，简单分析一下规律，发现发f[i]=f[i-1]+f[i-2]。</p><p>如下图：</p><img src= "/img/loading.gif" data-lazy-src="https://img2020.cnblogs.com/i-beta/1924270/202003/1924270-20200303090245118-1492545993.png" alt="" /><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> <span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"> <span class="number">2</span> <span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> <span class="number">3</span> <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"> 4 </span>&#123;</span><br><span class="line"> <span class="number">5</span>   <span class="keyword">int</span> n,i,j,a[<span class="number">101</span>];                  </span><br><span class="line"> <span class="number">6</span>   <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line"> <span class="number">7</span>   a[<span class="number">1</span>]=<span class="number">1</span>;a[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line"> <span class="number">8</span>   <span class="keyword">for</span> (i=<span class="number">3</span>;i&lt;=n;i++) </span><br><span class="line"> <span class="number">9</span>    &#123;</span><br><span class="line"><span class="number">10</span>      a[i]=a[i<span class="number">-1</span>]+a[i<span class="number">-2</span>];</span><br><span class="line"><span class="number">11</span> 　   &#125;</span><br><span class="line"><span class="number">12</span> <span class="built_in">cout</span>&lt;&lt;a[n];</span><br><span class="line"><span class="number">13</span> &#125; </span><br></pre></td></tr></table></figure><p>用这个代码，解决这个题的确很轻松。</p><p>可是只要稍微更改一下数据范围，就完全不一样了：</p><img src= "/img/loading.gif" data-lazy-src="https://img2020.cnblogs.com/blog/1924270/202003/1924270-20200303092801661-773393263.png" alt="" /><p>这样子，难度就完全不是一个等级了。</p><p>首先是不能开一个10^18^的数组，那样肯定会爆内存。</p><p>我们可以用滚动的数组：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mod 1e9+7</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">4</span>] = &#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    freopen(<span class="string">&quot;brick.in&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    freopen(<span class="string">&quot;brick.out&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">int</span> fbk;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; fbk;</span><br><span class="line">    <span class="keyword">if</span> (fbk==<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (fbk==<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> yousa = <span class="number">3</span>; yousa &lt;= fbk<span class="number">-2</span>; yousa++)</span><br><span class="line">        &#123;</span><br><span class="line">            a[<span class="number">3</span>] = (a[<span class="number">2</span>] + a[<span class="number">1</span>])%(<span class="keyword">long</span> <span class="keyword">long</span>)(mod);</span><br><span class="line">            a[<span class="number">1</span>] = a[<span class="number">2</span>];</span><br><span class="line">            a[<span class="number">2</span>] = a[<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; a[<span class="number">3</span>] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fclose(<span class="built_in">stdin</span>);</span><br><span class="line">    fclose(<span class="built_in">stdout</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试之后发现虽然内存占用很少，但是会超时。</p><p>这就用到我们的矩阵加速了：</p><h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h3><p>矩阵乘法可以先稍作了解，知道矩阵相乘的运算法则</p><img src= "/img/loading.gif" data-lazy-src="https://images.cnblogs.com/cnblogs_com/huixinxinw/1503711/o_200117131304%E5%9B%BE%E7%89%871.png" alt="img" /><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><p>快速幂要求解的是这样一类问题：</p><p>给你A,B,C，求A的B次方模C的余数</p><p>A,C&lt;=10^9^,B&lt;=10^18^</p><p>如果我们线性去求，时间复杂度是O（n）的，但题目中给出的B是很大的数，这样显然会超时,我们可以用快速幂来加速这个过程。</p><p>我们可以想像一下小学的时候我们如何计算2^16^</p><p>2^16^=4^8^=16^4^=256^2^=65536</p><p>那如何计算2^18^呢？</p><p>快速幂同理也是如此</p><p>我们可以按照上面做法，利用分治的思想求去解</p><p>这样原本O(n)的时间复杂度便降到了O(log n )</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans=<span class="number">1</span>,base=a;</span><br><span class="line"><span class="keyword">while</span>(n&gt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&amp;<span class="number">1</span>)</span><br><span class="line"> &#123;</span><br><span class="line">    ans*=base;</span><br><span class="line">    &#125;</span><br><span class="line">        base*=base;</span><br><span class="line">        n=n/<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h3><p>矩阵快速幂的原理同快速幂一样，只是转换为了矩阵之间的乘法操作</p><p>所以单纯的重载一下运算符(写成函数的形式也可），将普通的乘法转换为矩阵乘法就好了。</p><h3 id="矩阵加速"><a href="#矩阵加速" class="headerlink" title="矩阵加速"></a>矩阵加速</h3><p>知道那个叫矩阵快速幂的东西后我们可以学矩阵加速了</p><p>斐波那契数列中的每一项都是前两项之和</p><p>我们考虑构造这么一个矩阵：每一次乘上这个矩阵都能从f[n-1],f[n-2]两项向后递推到f[n-1],f[n]这两项</p><p>那么关键就是如何构造这样的矩阵</p><p>对于这样一个矩阵我们有</p><p>所以我们将每一次两项相加转换为了乘以一个转移矩阵</p><p>既然是乘法，每次乘以的也是同一个矩阵</p><p>我们可以利用矩阵快速幂的思想对于求解斐波那契数列加速</p><p>代码实现基本上是一致的，只需要构造一个转移矩阵来进行状态之间的转移即可</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mat</span>&#123;</span></span><br><span class="line">    ll m[<span class="number">5</span>][<span class="number">5</span>];</span><br><span class="line">&#125;a,ans;</span><br><span class="line">ll n,b,k; </span><br><span class="line"><span class="function">mat <span class="title">mul</span><span class="params">(mat x,mat y,<span class="keyword">int</span> flag)</span></span>&#123;</span><br><span class="line">    mat c;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2</span>;j++)</span><br><span class="line">            c.m[i][j]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=<span class="number">2</span>;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> q=<span class="number">1</span>;q&lt;=<span class="number">2</span>;q++)&#123;</span><br><span class="line">                    c.m[i][j]=(c.m[i][j]+x.m[i][q]*y.m[q][j])%Mod;</span><br><span class="line">        </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    a.m[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;a.m[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    a.m[<span class="number">2</span>][<span class="number">1</span>]=<span class="number">1</span>;a.m[<span class="number">2</span>][<span class="number">2</span>]=<span class="number">0</span>;</span><br><span class="line">    b=n<span class="number">-2</span>;</span><br><span class="line">    ans.m[<span class="number">1</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    ans.m[<span class="number">1</span>][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)&#123;</span><br><span class="line">         <span class="keyword">if</span>(b&amp;<span class="number">1</span>)&#123;</span><br><span class="line">            ans=mul(ans,a,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        a=mul(a,a,<span class="number">2</span>);</span><br><span class="line">        b=b/<span class="number">2</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">1</span>||n==<span class="number">2</span>)<span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span>&lt;&lt;ans.m[<span class="number">1</span>][<span class="number">1</span>]%Mod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样这个题就被解决了！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src= &quot;/img/loading.gif&quot; data-lazy-src=&quot;https://img2020.cnblogs.com/blog/1924270/202003/1924270-20200303084213350-258204603.png&quot; alt=&quot;&quot; </summary>
      
    
    
    
    
    <category term="算法概述" scheme="https://blog.foxex.cn/tags/%E7%AE%97%E6%B3%95%E6%A6%82%E8%BF%B0/"/>
    
    <category term="递推" scheme="https://blog.foxex.cn/tags/%E9%80%92%E6%8E%A8/"/>
    
    <category term="矩阵加速" scheme="https://blog.foxex.cn/tags/%E7%9F%A9%E9%98%B5%E5%8A%A0%E9%80%9F/"/>
    
  </entry>
  
  <entry>
    <title>洛谷P1217USACO1.5回文质数PrimePalindromes</title>
    <link href="https://blog.foxex.cn/2020/02/06/%E6%B4%9B%E8%B0%B7P1217USACO1.5%E5%9B%9E%E6%96%87%E8%B4%A8%E6%95%B0PrimePalindromes/"/>
    <id>https://blog.foxex.cn/2020/02/06/%E6%B4%9B%E8%B0%B7P1217USACO1.5%E5%9B%9E%E6%96%87%E8%B4%A8%E6%95%B0PrimePalindromes/</id>
    <published>2020-02-05T16:00:00.000Z</published>
    <updated>2020-07-13T03:17:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="P1217-USACO1-5-回文质数-Prime-Palindromes"><a href="#P1217-USACO1-5-回文质数-Prime-Palindromes" class="headerlink" title="P1217 [USACO1.5]回文质数 Prime Palindromes"></a>P1217 [USACO1.5]回文质数 Prime Palindromes</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>因为 151 既是一个质数又是一个回文数（从左到右和从右到左是看一样的），所以 151 是回文质数。</p><p>写一个程序来找出范围 [a,b](5≤a&lt;b≤100,000,000)( 一亿)间的所有回文质数。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第 1 行: 二个整数 <code>a </code>和 <code>b</code> .</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出一个回文质数的列表，一行一个。</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5 500</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">11</span></span><br><span class="line"><span class="number">101</span></span><br><span class="line"><span class="number">131</span></span><br><span class="line"><span class="number">151</span></span><br><span class="line"><span class="number">181</span></span><br><span class="line"><span class="number">191</span></span><br><span class="line"><span class="number">313</span></span><br><span class="line"><span class="number">353</span></span><br><span class="line"><span class="number">373</span></span><br><span class="line"><span class="number">383</span></span><br></pre></td></tr></table></figure><h2 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明/提示"></a>说明/提示</h2><p>Hint 1: Generate the palindromes and see if they are prime.</p><p>提示 1: 找出所有的回文数再判断它们是不是质数（素数）.</p><p>Hint 2: Generate palindromes by combining digits properly. You might need more than one of the loops like below.</p><p>提示 2: 要产生正确的回文数，你可能需要几个像下面这样的循环。</p><p>题目翻译来自NOCOW。</p><p>USACO Training Section 1.5</p><p>产生长度为5的回文数:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1 for (d1 &#x3D; 1; d1 &lt;&#x3D; 9; d1+&#x3D;2) &#123;    &#x2F;&#x2F; 只有奇数才会是素数</span><br><span class="line">2      for (d2 &#x3D; 0; d2 &lt;&#x3D; 9; d2++) &#123;</span><br><span class="line">3          for (d3 &#x3D; 0; d3 &lt;&#x3D; 9; d3++) &#123;</span><br><span class="line">4            palindrome &#x3D; 10000*d1 + 1000*d2 +100*d3 + 10*d2 + d1;&#x2F;&#x2F;(处理回文数...)</span><br><span class="line">5          &#125;</span><br><span class="line">6      &#125;</span><br><span class="line">7  &#125;</span><br></pre></td></tr></table></figure><p> <strong>首先，我看了题下面的提示，就想按照提示的方法解这道题。因为右边界的取值范围最大到100000000，所以我考虑到位数可以有以下几种情况：1,3,5,7,9.分类讨论分别写循环就可以列举出这里所有回文数了。</strong></p><p><strong>然后因为题目要的是回文质数，所以再加上一个质数的判断函数，是质数就输出就可以了：</strong></p><p><strong>按照提示，列举回文数的方法是这样的：</strong></p><p><strong>比如说我们需要列举所有九位的回文数，我们需要循环5个数：a,b,c,d,e，把这五个数从0`9进行循环，我们的回文数是这样的：</strong></p><img src= "/img/loading.gif" data-lazy-src="https://img2018.cnblogs.com/common/1924270/202002/1924270-20200206094520257-1296305125.png" alt="" /><p><strong>那就以此类推，写出其他位数的情况：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> l,r,num,abc=<span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="keyword">int</span> res[<span class="number">10000</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt;= <span class="number">9</span>; a += <span class="number">2</span>)<span class="comment">//一位</span></span><br><span class="line">    &#123;</span><br><span class="line">        num =a;</span><br><span class="line">        <span class="keyword">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class="line">        &#123;</span><br><span class="line">            res[abc] = num;</span><br><span class="line">            abc++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt;= <span class="number">9</span>; a++)<span class="comment">//三位</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">1</span>; b &lt;= <span class="number">9</span>; b += <span class="number">2</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            num =b * <span class="number">100</span> + a * <span class="number">10</span> + b;</span><br><span class="line">            <span class="keyword">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class="line">            &#123;</span><br><span class="line">                res[abc] = num;</span><br><span class="line">                abc++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt;= <span class="number">9</span>; a++)<span class="comment">//五位</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt;= <span class="number">9</span>; b++)</span><br><span class="line">    &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= <span class="number">9</span>; c += <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                num = c * <span class="number">10000</span> + b * <span class="number">1000</span> + a * <span class="number">100</span> + b * <span class="number">10</span> + c;</span><br><span class="line">                <span class="keyword">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class="line">                &#123;</span><br><span class="line">                    res[abc] = num;</span><br><span class="line">                    abc++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt;= <span class="number">9</span>; a++)<span class="comment">//七位</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt;= <span class="number">9</span>; b++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt;= <span class="number">9</span>; c++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= <span class="number">9</span>; d+=<span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                    num =   d * <span class="number">1000000</span> + c * <span class="number">100000</span> + b * <span class="number">10000</span> + a * <span class="number">1000</span> + b * <span class="number">100</span> + c * <span class="number">10</span> + d ;</span><br><span class="line">                    <span class="keyword">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class="line">                    &#123;</span><br><span class="line">                        res[abc] = num;</span><br><span class="line">                        abc++;</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt;= <span class="number">9</span>; a++)<span class="comment">//九位</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt;= <span class="number">9</span>; b++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt;= <span class="number">9</span>; c++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt;= <span class="number">9</span>; d++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> e = <span class="number">1</span>; e &lt;= <span class="number">9</span>; e+=<span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    num = e * <span class="number">100000000</span> + d * <span class="number">10000000</span> + c * <span class="number">1000000</span> + b * <span class="number">100000</span> + a * <span class="number">10000</span> + b * <span class="number">1000</span> + c * <span class="number">100</span> + d * <span class="number">10</span> + e;</span><br><span class="line">                    <span class="keyword">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class="line">                    &#123;</span><br><span class="line">                        res[abc] = num;</span><br><span class="line">                        abc++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>质数判断函数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isp</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">floor</span>(<span class="built_in">sqrt</span>(a));i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//能被整除说明不是质数</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这样子储存在数组中的数据顺序有些乱，因为我是按照它中间那一位数的顺序循环的。所以需要排一下序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sort(res, res + abc);</span><br></pre></td></tr></table></figure><p>然后就珂以输出了：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt;= abc<span class="number">-1</span>; z++)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res[z] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后提交上去一看：</p><p>WA，WA，WA</p><p>仔细研究程序发现：</p><p>回文数不止有奇数位的，还有偶数位的！！！（真是一个惊天动地的珂学大发现呢！）</p><p>赶紧加上：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt;= <span class="number">9</span>; b++)<span class="comment">//六位</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt;= <span class="number">9</span>; c++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= <span class="number">9</span>; d += <span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    num = d * <span class="number">100000</span> + c * <span class="number">10000</span> + b * <span class="number">1000</span> +b * <span class="number">100</span> + c * <span class="number">10</span> + d;</span><br><span class="line">                    <span class="keyword">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class="line">                    &#123;</span><br><span class="line">                        res[abc] = num;</span><br><span class="line">                        abc++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt;= <span class="number">9</span>; c++)<span class="comment">//四位</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= <span class="number">9</span>; d += <span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    num = d * <span class="number">1000</span> + c * <span class="number">100</span> + c * <span class="number">10</span> + d;</span><br><span class="line">                    <span class="keyword">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class="line">                    &#123;</span><br><span class="line">                        res[abc] = num;</span><br><span class="line">                        abc++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= <span class="number">9</span>; d += <span class="number">2</span>)<span class="comment">//两位</span></span><br><span class="line">                &#123;</span><br><span class="line">                    num = d * <span class="number">10</span> +d;</span><br><span class="line">                    <span class="keyword">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class="line">                    &#123;</span><br><span class="line">                        res[abc] = num;</span><br><span class="line">                        abc++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><p>大功告成！</p><p>附上全部的程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isp</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">floor</span>(<span class="built_in">sqrt</span>(a));i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (a % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l,r,num,abc=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; l &gt;&gt; r;</span><br><span class="line">    <span class="keyword">int</span> res[<span class="number">10000</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">1</span>; a &lt;= <span class="number">9</span>; a += <span class="number">2</span>)<span class="comment">//一位</span></span><br><span class="line">        &#123;</span><br><span class="line">            num =a;</span><br><span class="line">            <span class="keyword">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class="line">            &#123;</span><br><span class="line">                res[abc] = num;</span><br><span class="line">                abc++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt;= <span class="number">9</span>; a++)<span class="comment">//三位</span></span><br><span class="line">    &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">1</span>; b &lt;= <span class="number">9</span>; b += <span class="number">2</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                num =b * <span class="number">100</span> + a * <span class="number">10</span> + b;</span><br><span class="line">                <span class="keyword">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class="line">                &#123;</span><br><span class="line">                    res[abc] = num;</span><br><span class="line">                    abc++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt;= <span class="number">9</span>; a++)<span class="comment">//五位</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt;= <span class="number">9</span>; b++)</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= <span class="number">9</span>; c += <span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    num = c * <span class="number">10000</span> + b * <span class="number">1000</span> + a * <span class="number">100</span> + b * <span class="number">10</span> + c;</span><br><span class="line">                    <span class="keyword">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class="line">                    &#123;</span><br><span class="line">                        res[abc] = num;</span><br><span class="line">                        abc++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt;= <span class="number">9</span>; a++)<span class="comment">//七位</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt;= <span class="number">9</span>; b++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt;= <span class="number">9</span>; c++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= <span class="number">9</span>; d+=<span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                        num =   d * <span class="number">1000000</span> + c * <span class="number">100000</span> + b * <span class="number">10000</span> + a * <span class="number">1000</span> + b * <span class="number">100</span> + c * <span class="number">10</span> + d ;</span><br><span class="line">                        <span class="keyword">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class="line">                        &#123;</span><br><span class="line">                            res[abc] = num;</span><br><span class="line">                            abc++;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt;= <span class="number">9</span>; a++)<span class="comment">//九位</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt;= <span class="number">9</span>; b++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt;= <span class="number">9</span>; c++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt;= <span class="number">9</span>; d++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> e = <span class="number">1</span>; e &lt;= <span class="number">9</span>; e+=<span class="number">2</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        num = e * <span class="number">100000000</span> + d * <span class="number">10000000</span> + c * <span class="number">1000000</span> + b * <span class="number">100000</span> + a * <span class="number">10000</span> + b * <span class="number">1000</span> + c * <span class="number">100</span> + d * <span class="number">10</span> + e;</span><br><span class="line">                        <span class="keyword">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class="line">                        &#123;</span><br><span class="line">                            res[abc] = num;</span><br><span class="line">                            abc++;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt;= <span class="number">9</span>; b++)<span class="comment">//六位</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt;= <span class="number">9</span>; c++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= <span class="number">9</span>; d += <span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    num = d * <span class="number">100000</span> + c * <span class="number">10000</span> + b * <span class="number">1000</span> +b * <span class="number">100</span> + c * <span class="number">10</span> + d;</span><br><span class="line">                    <span class="keyword">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class="line">                    &#123;</span><br><span class="line">                        res[abc] = num;</span><br><span class="line">                        abc++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt;= <span class="number">9</span>; c++)<span class="comment">//四位</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= <span class="number">9</span>; d += <span class="number">2</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    num = d * <span class="number">1000</span> + c * <span class="number">100</span> + c * <span class="number">10</span> + d;</span><br><span class="line">                    <span class="keyword">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class="line">                    &#123;</span><br><span class="line">                        res[abc] = num;</span><br><span class="line">                        abc++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= <span class="number">9</span>; d += <span class="number">2</span>)<span class="comment">//两位</span></span><br><span class="line">                &#123;</span><br><span class="line">                    num = d * <span class="number">10</span> +d;</span><br><span class="line">                    <span class="keyword">if</span> (num &gt;= l &amp;&amp; num &lt;= r &amp;&amp; isp(num))</span><br><span class="line">                    &#123;</span><br><span class="line">                        res[abc] = num;</span><br><span class="line">                        abc++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">    sort(res, res + abc);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> z = <span class="number">0</span>; z &lt;= abc<span class="number">-1</span>; z++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; res[z] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有一个方法。我们其实可以先列举出所有5~100000000的整数，然后分别判断是不是回文数，是不是质数，是不是在区间内。因为会超时，所以还是别试了78.42秒</p><p>程序：（其实可以直接用++来列举，我这样进行嵌套是为了能一眼看出效率有多么低）（5 100000000时）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isp</span><span class="params">(<span class="keyword">int</span> pr)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">floor</span>(<span class="built_in">sqrt</span>(pr)); i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pr % i == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ishui</span><span class="params">(<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (x % <span class="number">10</span> == <span class="number">0</span> || x &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (x &gt; s)</span><br><span class="line">    &#123;</span><br><span class="line">        s = s * <span class="number">10</span> + x % <span class="number">10</span>;</span><br><span class="line">        x /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (x == s || s / <span class="number">10</span> == x)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> s = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">5</span>, r=<span class="number">100000000</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt;= <span class="number">9</span>; a++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> b = <span class="number">0</span>; b &lt;= <span class="number">9</span>; b++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt;= <span class="number">9</span>; c++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> d = <span class="number">0</span>; d &lt;= <span class="number">9</span>; d++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> e = <span class="number">0</span>; e &lt;= <span class="number">9</span>; e++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> f = <span class="number">0</span>; f &lt;= <span class="number">9</span>; f++)</span><br><span class="line">                        &#123;</span><br><span class="line">                            <span class="keyword">for</span> (<span class="keyword">int</span> g = <span class="number">0</span>; g &lt;= <span class="number">9</span>; g++)</span><br><span class="line">                            &#123;</span><br><span class="line">                                <span class="keyword">for</span> (<span class="keyword">int</span> h = <span class="number">0</span>; h &lt;= <span class="number">9</span>; h++)</span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">                                    &#123;</span><br><span class="line">                                        s = a * <span class="number">100000000</span> + b * <span class="number">10000000</span> + c * <span class="number">1000000</span> + d * <span class="number">100000</span> + e * <span class="number">10000</span> + f * <span class="number">1000</span> + g * <span class="number">100</span> + h * <span class="number">10</span> + i;</span><br><span class="line">                                        <span class="keyword">if</span> (isp(s) &amp;&amp; ishui(s) &amp;&amp; s &gt;= l &amp;&amp; s &lt;= r)</span><br><span class="line">                                        &#123;</span><br><span class="line">                                            <span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                                        &#125;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;P1217-USACO1-5-回文质数-Prime-Palindromes&quot;&gt;&lt;a href=&quot;#P1217-USACO1-5-回文质数-Prime-Palindromes&quot; class=&quot;headerlink&quot; title=&quot;P1217 [USACO1.5]回文</summary>
      
    
    
    
    
    <category term="数论" scheme="https://blog.foxex.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="洛谷" scheme="https://blog.foxex.cn/tags/%E6%B4%9B%E8%B0%B7/"/>
    
  </entry>
  
  <entry>
    <title>P1553数字反转（升级版)</title>
    <link href="https://blog.foxex.cn/2020/01/30/P1553%E6%95%B0%E5%AD%97%E5%8F%8D%E8%BD%AC%EF%BC%88%E5%8D%87%E7%BA%A7%E7%89%88)/"/>
    <id>https://blog.foxex.cn/2020/01/30/P1553%E6%95%B0%E5%AD%97%E5%8F%8D%E8%BD%AC%EF%BC%88%E5%8D%87%E7%BA%A7%E7%89%88)/</id>
    <published>2020-01-29T16:00:00.000Z</published>
    <updated>2020-07-13T03:16:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个数，请将该数各个位上数字反转得到一个新数。</p><p>这次与NOIP2011普及组第一题不同的是：这个数可以是小数，分数，百分数，整数。整数反转是将所有数位对调；小数反转是把整数部分的数反转，再将小数部分的数反转，不交换整数部分与小数部分；分数反转是把分母的数反转，再把分子的数反转，不交换分子与分母；百分数的分子一定是整数，百分数只改变数字部分。整数新数也应满足整数的常见形式，即除非给定的原数为零，否则反转后得到的新数的最高位数字不应为零；小数新数的末尾不为0（除非小数部分除了0没有别的数，那么只保留1个0）；分数不约分，分子和分母都不是小数（约分滴童鞋抱歉了，不能过哦。输入数据保证分母不为0），本次没有负数。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>一个数s</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>一个数，即s的反转数</p><h2 id="输入输出样例"><a href="#输入输出样例" class="headerlink" title="输入输出样例"></a>输入输出样例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5087462</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2647805</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">600.084</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6.48</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">700&#x2F;27</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">7&#x2F;72</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8670%</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">768%</span><br></pre></td></tr></table></figure><h2 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明/提示"></a>说明/提示</h2><p>所有数据：</p><p>25%<code>s</code>是整数，不大于20位</p><p>25%<code>s</code>是小数，整数部分和小数部分均不大于10位</p><p>25%<code>s</code>是分数，分子和分母均不大于10位</p><p>25%<code>s</code>是百分数，分子不大于19位</p><p>（20个数据）</p><p><strong>首先，我们看到这个题，易分析出这个题有四个步骤：拆分，翻转，去零，输出。</strong></p><p><strong>所以我们只要分开编出几个函数进行这几个操作即可。</strong></p><p><strong>经过观察，易发现：小数的小数部分需要去除的是后部的零，而其他的需要去除的是前部的零。</strong></p><p><strong>不多说了，直接上程序：（用的是对字符串的处理）（程序有点长，但思路非常简单易懂）</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">qutou</span><span class="params">(<span class="built_in">string</span> a)</span><span class="comment">//作用：去除头部的零</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">while</span>(a[<span class="number">0</span>]==<span class="string">&#x27;0&#x27;</span>&amp;&amp;len!=<span class="number">1</span>)<span class="comment">//如果第一位还是零</span></span><br><span class="line">    &#123;</span><br><span class="line">        len=a.size();</span><br><span class="line">        a=a.substr(<span class="number">1</span>,len<span class="number">-1</span>);<span class="comment">//把除了第一位之外的部分向前移动一位，覆盖第一位的零</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">quwei</span><span class="params">(<span class="built_in">string</span> a)</span><span class="comment">//作用：去除头部的零</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=a.size();</span><br><span class="line">    <span class="keyword">while</span>(a[len<span class="number">-1</span>]==<span class="string">&#x27;0&#x27;</span>)<span class="comment">//如果第一位还是零</span></span><br><span class="line">    &#123;</span><br><span class="line">        a=a.substr(<span class="number">0</span>,len<span class="number">-1</span> );<span class="comment">//把除了最后一位之外的部分向后移动一位，覆盖最后一位的零</span></span><br><span class="line">        len--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">fanzhuan</span><span class="params">(<span class="built_in">string</span> a)</span><span class="comment">//作用：将数翻转</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> len=a.size();</span><br><span class="line">    <span class="built_in">string</span> b;<span class="comment">//创建一个临时字符串&quot;b&quot;</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=len<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)<span class="comment">//将a反向粘贴到b上</span></span><br><span class="line">    &#123;</span><br><span class="line">        b+=a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> b;<span class="comment">//返回b</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> front,behind,total;<span class="comment">//字符串front，behind分别用来储存小数和分数的前半部分和后半部分</span></span><br><span class="line">    getline(<span class="built_in">cin</span>,total);</span><br><span class="line">    <span class="keyword">int</span> len=total.size(),n=<span class="number">0</span>,form=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;;i++)<span class="comment">//遍历字符串</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(total[i]!=<span class="string">&#x27;/&#x27;</span>&amp;&amp;total[i]!=<span class="string">&#x27;%&#x27;</span>&amp;&amp;total[i]!=<span class="string">&#x27;.&#x27;</span>)<span class="comment">//如果当前位置不是特殊字符</span></span><br><span class="line">        &#123;</span><br><span class="line">            front+=total[i];<span class="comment">//将这个字符储存进front中</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(total[i]==<span class="string">&#x27;/&#x27;</span>)<span class="comment">//如果是&#x27;/&#x27;，说明分子已经读入结束</span></span><br><span class="line">        &#123;</span><br><span class="line">            form=<span class="number">1</span>;<span class="comment">//记录下这个数是分数</span></span><br><span class="line">            n=i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//结束读取分子</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(total[i]==<span class="string">&#x27;%&#x27;</span>)<span class="comment">//如果是&#x27;%&#x27;，说明百分数已经读入结束</span></span><br><span class="line">        &#123;</span><br><span class="line">            form=<span class="number">2</span>;<span class="comment">//记录下这个数是百分数</span></span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//结束读取</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(total[i]==<span class="string">&#x27;.&#x27;</span>)<span class="comment">//如果是&#x27;.&#x27;，说明整数部分已经读入结束</span></span><br><span class="line">        &#123;</span><br><span class="line">            form=<span class="number">3</span>;<span class="comment">//记录下这个数是小数</span></span><br><span class="line">            n=i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//结束读取整数部分</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i==len<span class="number">-1</span>)<span class="comment">//如果一直读取到了最后一位还没有特殊符号</span></span><br><span class="line">        &#123;</span><br><span class="line">            form=<span class="number">4</span>;<span class="comment">//记录下这个数是整数</span></span><br><span class="line">            <span class="keyword">break</span>;<span class="comment">//结束读取</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(form==<span class="number">1</span>||form==<span class="number">3</span>)<span class="comment">//如果是分数或小数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=n;j&lt;=len<span class="number">-1</span>;j++)<span class="comment">//读取分母（或小数部分）</span></span><br><span class="line">        &#123;</span><br><span class="line">            behind+=total[j];</span><br><span class="line">        &#125;</span><br><span class="line">        behind=fanzhuan(behind);<span class="comment">//翻转后部</span></span><br><span class="line">    &#125;</span><br><span class="line">    front=fanzhuan(front);<span class="comment">//翻转前部</span></span><br><span class="line">    front=qutou(front);<span class="comment">//对前部进行去除头部的零</span></span><br><span class="line">    <span class="keyword">if</span>(form==<span class="number">1</span>)<span class="comment">//如果是分数</span></span><br><span class="line">    &#123;</span><br><span class="line">        behind=qutou(behind);<span class="comment">//对后部进行去除头部的零</span></span><br><span class="line">        <span class="keyword">if</span>(front==<span class="string">&quot;\0&quot;</span>)<span class="comment">//如果前部去头之后什么也不剩，说明前部是零</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;0/&quot;</span>&lt;&lt;behind;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;front&lt;&lt;<span class="string">&quot;/&quot;</span>&lt;&lt;behind;<span class="comment">//输出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(form==<span class="number">2</span>)<span class="comment">//如果是百分数</span></span><br><span class="line">    &#123;</span><br><span class="line">        front=qutou(front);</span><br><span class="line">        <span class="keyword">if</span>(front==<span class="string">&quot;\0&quot;</span>)<span class="comment">//如果前部去头之后什么也不剩，说明前部是零</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;0%&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;front&lt;&lt;<span class="string">&quot;%&quot;</span>;<span class="comment">//输出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(form==<span class="number">3</span>)<span class="comment">//如果是分数</span></span><br><span class="line">    &#123;</span><br><span class="line">        behind=quwei(behind);<span class="comment">//对后部进行去除尾部的零</span></span><br><span class="line">        <span class="keyword">if</span>(behind==<span class="string">&quot;\0&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(front==<span class="string">&quot;\0&quot;</span>)<span class="comment">//如果前部去头之后什么也不剩，说明前部是零</span></span><br><span class="line">            &#123;</span><br><span class="line">                front=<span class="string">&quot;0&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;front&lt;&lt;<span class="string">&quot;.0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;front&lt;&lt;<span class="string">&quot;.&quot;</span>&lt;&lt;behind;<span class="comment">//输出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(form==<span class="number">4</span>)<span class="comment">//如果是整数</span></span><br><span class="line">    &#123;</span><br><span class="line">        front=qutou(front);</span><br><span class="line">        <span class="keyword">if</span>(front==<span class="string">&quot;\0&quot;</span>)<span class="comment">//如果前部去头之后什么也不剩，说明前部是零</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;front;<span class="comment">//输出</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h2&gt;&lt;p&gt;给定一个数，请将该数各个位上数字反转得到一个新数。&lt;/p&gt;
&lt;p&gt;这次与NOIP2011普及组第一题不同的是：这个数可以是小</summary>
      
    
    
    
    
    <category term="数论" scheme="https://blog.foxex.cn/tags/%E6%95%B0%E8%AE%BA/"/>
    
    <category term="字符串" scheme="https://blog.foxex.cn/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="C++一本通题库" scheme="https://blog.foxex.cn/tags/C-%E4%B8%80%E6%9C%AC%E9%80%9A%E9%A2%98%E5%BA%93/"/>
    
  </entry>
  
</feed>
